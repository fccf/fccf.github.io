<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[CFETR简介]]></title>
    <url>%2F2017%2F12%2F13%2FCFETR%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[CFETR 简介 CFETR是China Fusion Engineering Test Reactor 的简称，这是中国在吸收消化ITER技术的基础上提出建造自己的聚变工程实验堆。以下对CFETR进行简单介绍 历史 2011年，科技部(MOST)成立CFETR设计组，万元熙任组长，李建刚，刘永，汪小琳任副组长。 2015年，完成CFETR概念设计，提出中国聚变能路线图。 2017年12月5日，启动CFETR工程设计研究，项目负责任为宋云涛。并提出中国核聚变研究三步走战略： 2021年，CFETR开始建设 2035年，建成CFETR，开始大规模科学实验 2050年，CFETR实验成功，建设聚变商用示范堆 研究人员以及单位 超过 200 人在对CFETR进行研究，主要研究单位包括 中国科学院等离子体物理研究所 (ASIPP) 核工业西南物理研究院 (SWIP) 中国工程物理研究院 (CAEP) 中国科学技术大学 (USTC) 华中科技大学(HUST) 中国磁约束核聚变路线图 CFETR 建筑 CFETR 尺寸 CFETR 设计参数 CFETR 主要部件电磁线圈 (magnet coil) 极向线圈 (Poloidal field (PF) coil) 经向线圈(Toroidal Field (TF) coil) 中心螺管线圈 (Central solenoid coil) 真空容器 (Vacuum Vessel) 包层 (Blanket) 屏蔽包层 (Shielding Blanket Module (SBM))实验包层 (Test Blanket Module (TBM))杜瓦 (cryostat) 偏滤器 (Divertor)]]></content>
      <categories>
        <category>核聚变</category>
      </categories>
      <tags>
        <tag>CFETR</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[反应堆设计工具包NEAMS介绍]]></title>
    <url>%2F2017%2F12%2F12%2F%E5%8F%8D%E5%BA%94%E5%A0%86%E8%AE%BE%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%8C%85NEAMS%E4%BB%8B%E7%BB%8D%2F</url>
    <content type="text"><![CDATA[NEAMS 是 Nuclear Energy Advanced Modeling and Simulation 的缩写。是美国能源部 (DOE)召集全美各个主要研究核能的实验室，大学以及工业界利用最先进的方法和技术开发的具有革命性的反应堆设计工具包。 NEAMS的主要任务 NEAMS 包含三条产品线： 燃料性能产品线，主要基于INL的MOOSE平台开发，包括分析燃料颗粒性质的 MARMOT 程序和分析燃料棒性能的 BISON 程序。该条产品线主要 INL 负责。 反应堆模拟产品线，主要包括ANL的堆芯多物理耦合计算程序SHARP，以及INL的系统模拟程序RELAP 7。多物理耦合计算程序包括中子学计算程序 PROTEUS, 热工水力计算程序 Nek5000, 机械结构计算程序 diablo。并通过网格数据工具SIGMA 将所有程序结合起来。该条产品线主要 ANL 负责。 整合产品线，主要把相关产品全部整合起来，除了以上的燃料性能程序和反应堆模拟程序，还要把进行燃耗计算的 ORIGEN 程序，进行敏感性与不确定性分析的 Dakota 程序等全部进行整合，并开发用户界面，形成 NEAMS 计算平台。该条产品线主要 ORNL 负责。 Fuel Product Line (FPL) Subcontinuum Scale (MARMOT) Engineering Scale (BISON) Reactors Product Line (RPL) Multiphysics Simulations (SHARP) Neutronics (PROTEUS) Thermal Fluids (Nek5000)Structural Mechanics (diablo)System Simulation (relap-7)Integration Product Line (IPL) User Environment (NiCE) Geometry Interfaces (SIGMA) Common Geometry Module (CGM)Dependencies OpenCascade Mesh-Oriented datABase (MOAB)Dependencies MPI HDF5 METIS ZoltanMesh Generation (MeshKit)Dependencies CGM MOAB]]></content>
      <categories>
        <category>反应堆设计</category>
      </categories>
      <tags>
        <tag>反应堆设计工具， NEAMS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[中子输运方程有限元求解软件]]></title>
    <url>%2F2017%2F12%2F11%2F%E4%B8%AD%E5%AD%90%E8%BE%93%E8%BF%90%E6%96%B9%E7%A8%8B%E6%9C%89%E9%99%90%E5%85%83%E6%B1%82%E8%A7%A3%E8%BD%AF%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[随着反应堆设计越来越复杂以及计算精度的要求越来越高，中子输运方程的求解方法已经从最初的差分SN方法发展到适用于非结构几何的有限元方法或MOC方法，以下对国际上有名的有限元软件进行了总结 ATTILA开发机构 1995年，LANL开始开发。 2002年，创建Transpire.Inc 2004年，发布ATTILA1.0 2007年，被接收为ITER设计工具 2014年8月5日，被Varex Imaging收购 2017年10月6日，发布Attila9.1，集成了MCNP6与ATTILA 主要方法 空间上采用 DFEM 方法(间断有限元)。 单元类型为线性四面体。 角度上采用 SN 方法。 集成工具 ATTILA MCNP6 SpaceClaim (ANSYS.Inc) 典型问题 ITER ATR PROTEUS开发机构 ANL 主要方法 基于奇偶型中子输运方程。 空间上采用连续有限元方法。 单元类型包含多种，有三角形，四边形，四面体，六面体，三棱柱，六棱柱等。 角度上有SN，PN, MOC。由于PN方法太慢，主要开发的还是SN 集成工具 MPICH (并行环境) METIS (区域分解) PETSc (代数方程求解) HDF5 (数据保存) CUBIT (网格剖分) NetCDF (网格格式转化) VTK (VisIt 数据可视化) 典型问题 ATR 未来计划 sharp (Multiphysics Simulation Toolkit for Nuclear Reactor Analysis) NEAMS (Nuclear Energy Advanced Modeling and Simulation) 2012 MOOSE-Rattlesnake开发机构 2008年，INL开始开发MOOSE框架，采用C++语言 主要方法 基于 SAAF 方程，LS 方程，FNET 二阶方程采用连续有限元，一阶方程采用间断有限元方法 单元类型包含多种，有三角形，四边形，四面体，六面体，三棱柱，六棱柱等。 角度上有SN,PN 集成工具 MPICH (并行环境) LibMesh (有限元库) PETSc (代数方程求解) VTK (数据可视化) …… 典型问题 PWR TREAT 未来计划 APOLLO3-MINARET开发机构 2009年，CEA在 APOLLO2, CRONOS2, ERANOS2的基础上，重新设计与开发新一代的模拟软件。 2012年，发布 APOLLO3-V1.0 主要方法 空间上采用间断有限元方法 采用三角形单元和三棱柱单元 角度上采用SN方法 典型问题 ASTRID FR 未来计划 RADIANT开发机构 AMCG - IC，正在开发 主要方法 空间上采用连续有限元， SGS稳定算法 单元类型包含各种类型 角度上采用 Pn,PN,Wavelet方法 含空间自适应，角度自适应 集成工具 gmsh (网格剖分) VTK (paraview 可视化) fluidity (耦合CFD) 典型问题 C5G7 未来计划 AETIUS开发机构 2017年，KAERI 正在开发 主要方法 空间上采用间断有限元方法 采用四面体单元 角度上采用SN方法 集成工具 gmsh (网格剖分工具) 典型问题 HCCR TBM]]></content>
      <categories>
        <category>输运计算软件</category>
      </categories>
      <tags>
        <tag>输运计算软件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[awsome-NTE-solver]]></title>
    <url>%2F2017%2F12%2F11%2Fawsome-NTE-solver%2F</url>
    <content type="text"><![CDATA[A list of neutron transport equation solver code DANTSYS (ONEDANT,TWODANT,THREEDANT) origin: LANL methods: SN, FDM PARTISN origin: LANL methods: SN, FDM ATTILA origin: LANL, Transpire.inc, Varex Imaging. methods: SN, DEFM DOORS (ANISN,DORT,TORT) origin: ORNL methods: SN, FDM SCALE origin: ORNL DENOVO methods: SN, FDM TRITON methods: MOC PROTEUS origin: ANL PROTEUS-SN methods: SN, FEM, EP PROTEUS-MOC methods: MOC PROTEUS-NODAL methods: DN SHARP origin: ANL methods: PN, EP, SN, DN, FEM, MOC MOOSE-Rattlesnake origin: INL methods: SN, DFEM, PN, FEM, LS, SAAF MPACT origin: MU methods: MOC PENTRAN origin: PSU methods: SN,FD OpenMOC origin: MIT methods: MOC PARCS origin: PU methods: DN AGENT origin: PU methods: 2D-MOC/1D-FDM COMET origin: GT methods: RM CASMO5 origin: Studsvik Scandpower methods: 2D-MOC SIMULATE5 origin: Studsvik Scandpower methods: 3D-DN HELIOS2 origin: Studsvik Scandpower methods: 2D-Pij/MOC ANC origin: Westinghouse methods: ND PARAGON origin: Westinghouse methods: 2D-Pij DRAGON origin: EPM methods: Pij, MOC TRIVAC origin: EPM methods: DN, SPN APOLLO2 origin: CEA methods: 2D-Pij/MOC/SN CRONOS2 origin: CEA methods: 3D:DN,SPN,SN ERANOS origin: CEA methods: 2D:Pij,SN; 3D: PN APOLLO3 origin: CEA methods: 2D:Pij,MOC,SN; 3D:DN,SPN,SN,MOC MINARET origin: CEA methods: SN, DFEM IDT origin: CEA methods: SN, MOC WIMS origin: methods: 2D:Pij,SN,MOC; 3D:DN,MOC EVENT origin: IC methods: PN,FEM,EP RADIANT origin: IC methods: PN, FEM, FNTE CRX origin: KAERI methods: 2D-MOC DeCART origin: KAERI methods: SN,MOC AETIUS origin: KAERI methods: SN, DFEM AEGIS origin: NU methods: 2D-MOC SCOPE2 origin: NU methods: SN, DFEM CHAPLET 3D origin: OU methods: 2D-MOC/1D-FDM AbbreviationsOrganization LANL: Los Alamos National Laboratory ANL: Argonne National Laboratory ORNL: Oak Ridge National Laboratory INL: Idaho National Laboratory MU: Michigan University MIT: Massachusetts Institute of Technology PSU: Pennsylvania State University, PU: Purdue University GT: Georgia Institute of Technology EPM: Ecole Polytechnique de Montréal (Canada) CEA: Commissariat àl’Energie Atomique(France) IC: Imperial College (UK) KAERI: Korea Atomic Energy Research Institute (Korea) NU: Nagoya University (Japan) OU: Osaka University (Japan) Angular Approximation SN: Discrete Ordinates Angular Approximation PN: spherical harmonics Angular Approximation MOC: Method Of Characteristics DN: Diffusion Nodale Space Approximation FEM: Finite Element Methods FDM: Finite Difference Methods DFEM: Discontinuous Finite Element Methods RM: Response Matrix Equation NTE: Neutron Transport Equation EP: Second-order Even Parity Equation LS: Least Squares formulation SAAF: Self-Adjoint Angular Flux formulation FNTE: First-order Neutron Transport Equation Reference [1] wikipedia [2] PROSPECTS IN DETERMINISTIC THREE-DIMENSIONAL PROSPECTS IN DETERMINISTIC THREE-DIMEWHOLE-CORE TRANSPORT CALCULATIONS]]></content>
      <categories>
        <category>输运计算软件</category>
      </categories>
      <tags>
        <tag>输运计算软件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[输运计算程序总结]]></title>
    <url>%2F2017%2F12%2F09%2F%E8%BE%93%E8%BF%90%E8%AE%A1%E7%AE%97%E7%A8%8B%E5%BA%8F%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[对国际上的中中子输运/扩散计算程序进行了调研，主要调研了程序名称，开发机构以及主要使用的方法，下面对这些程序进行了简单总结： 输运/扩散计算程序 PN: spherical harmonics Angular Approximation SPN: Simplified PN SN: Discrete Ordinates Angular Approximation MOC: Method Of Characteristics FE: Finite Elements DFE: Discontinuous Finite Elements RM: Response Matrix FD: Finite Differences EP: Second-order Even Parity Equation ST: Step Approximation ANL: Argonne National Laboratory IC: Imperial College LANL: Los Alamos National Laboratory PSU: Pennsylvania State University, IPPE: Institute of Physics and Power Engineering KAERI: Korea Atomic Energy Research Institute GT: Georgia Institute of Technology CEA: Commissariat àl’Energie Atomique EPM: Ecole Polytechnique de Montréal VARIANT 和 EVENT 都是比较老的程序，采用PN有限元方法求解二阶奇偶型中子输运方程。剩下的基本上都是采用的SN方法。 确定论程序总结美国 程序名称 开发组织 方法 ATTILA LANL (Transpire.inc) (VEREX) SN,DFE PARTISN LANL SN,FD DANTSYS(ONEDANT,TWODANT,THREEDANT) LANL SN, FD DOORS(ANISN,DORT,TORT) ORNL SN, FD TRITON(SCALE) ORNL MOC DENOVO(SCALE) ORNL SN, FD VARIANT ANL PN,FE,RM,EP,RM SHARP(UNIC) ANL PN,SN,FE,EP,MOC PROTEUS ANL SN,MOC,FE,EP Rattlesnake(MOOSE) INL SN,LSFE,DFE PARCS PU DN AGENT PU 2D:MOC/1D:FD MPACT MU MOC OpenMOC MIT MOC PENTRAN PSU SN,FD COMET GT RM ANC Westinghouse 3D:NEM PARAGON Westinghouse 2D:Pij CASMO Studsvik Scandpower 2D：MOC SIMULATE Studsvik Scandpower 3D:DN HELIOS2 Studsvik Scandpower 2D:Pij,MOC Lancer 02 GE Energy 2D:Pij,MOC PU: Purdue UniversityMU: Michigan UniversityDN: Diffusion Nodale 法国 程序名称 开发组织 方法 APOLLO2 CEA 2D:Pij,MOC,SN APOLLO3 CEA 2D:Pij,MOC,SN;3D:D,SPN,SN,MOC CRONOS2 CEA 3D:D,SPN,SN ERANOS/ECCO CEA 2D:Pij,SN; 3D: PN MINARET CEA SN,DFE IDT CEA SN, MOC 英国 程序名称 开发组织 方法 WIMS 2D:Pij,SN,MOC;3D:D,MOC EVENT IC PN,FE,EP RADIANT IC PN,FE,FNTE FNTE: First-order Neutron Transport Equation 韩国 程序名称 开发组织 方法 CRX KAERI 2D:MOC DeCART KAERI SN,MOC AETIUS KAERI SN,DFE 加拿大 程序名称 开发组织 方法 TRIVAC EPM D,SPN DRAGON EPM Pij,MOC 日本 程序名称 开发组织 方法 AEGIS NU 2D:MOC SCOPE2 NU SP3 CHAPLET 3D OU 2D:MOC/1D:FD NU: Nagoya UniversityOU: Osaka University MC程序总结 程序名称 开发组织 MCNP-5 LANL KENO-6 ORNL MC21 KAPL OpenMC MIT MONK AMEC SERPENT VTT PRIZMA RFNC MCU KI TRIPOLI-4 CEA MVP JAEA FLUKA CERN GEANT4 CERN RMC TU SuperMC FDS KAPL: Knolls Atomic Power LaboratoryVTT: VTT Technical Research Centre of FinlandRFNC: Zababakhin Institute of Technical Physics, RussiaKI: Kurchatov InstituteRussie, RussiaTU: Tsinghua University 参考AttilaPARTISNDOORSDANTSYSSCALEVARIANTSHARPPROTEUSMAMMOTH/RattlesnakePARCSAGENTMPACTOpenMOCANCCASMO5SIMULATE5HELIOS2MCNPOpenMC]]></content>
      <categories>
        <category>输运计算软件</category>
      </categories>
      <tags>
        <tag>输运计算软件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[输运计算软件Attila介绍]]></title>
    <url>%2F2017%2F12%2F06%2F%E8%BE%93%E8%BF%90%E8%AE%A1%E7%AE%97%E8%BD%AF%E4%BB%B6Attila%E4%BB%8B%E7%BB%8D%2F</url>
    <content type="text"><![CDATA[Attila软件是一个输运计算软件。采用Sn + 间断有限元，采用的网格为线性四面体单元，可以计算非结构几何。2007年被接收为ITER工程设计软件，在聚变以及辐射屏蔽方便有广泛的应用。Attila的发展历程如下 1995年： Los Alamos CIC3-Group开始开发 1996年： ATTILA: A three-dimensional, unstructured tetrahedral mesh discrete ordinates transport code 1998年：3D unstructured-mesh radiation transport codes 2002年：Greg Failla，Drs, John McGhee， Todd Wareing (LANL前职员) 创建了Transpire.Inc公司，基于LANL的技术，开发了Attila软件，于2004年发布第一个版本。 2007年被接收为ITER的设计工具. 2014年8月5日：瓦里安医疗(varian)宣布收购Transpire公司部分资产，包括Acuros软件产品和Attila软件产品。瓦里安医疗(varian)是全球最大肿瘤放射设备制造商，目前市值100.38亿美元(20171206) 2017年10月6日：发布Attila9.1。最新版集合了Attila与MCNP6，叫Attila4MC 。可以在同一个GUI上使用CAD直接建模，用Attila做设计计算，MCNP做验证计算。MCNP6来自Los Alamos National Laboratory。Attila来自Varex Imaging。SpaceClaim来自 ANSYS, Inc。 Attila提供以下 功能 参考attila-founderGreg Failla, Chief Executive Officer of Transpire, Inc., has plenty of reasons to be proud of what the company has accomplished in the past six years. In 2002, Radion Technologies (later reincorporated as Transpire, Inc.) was founded by Failla and two former Los Alamos National Laboratory (LANL) scientists, Drs. John McGhee and Todd Wareing. Drs. McGhee and Wareing launched the startup company while on an entrepreneurial leave of absence from LANL, where they worked as scientists. They were joined soon after by Dr. Allen Barnett, who previously worked as a shielding engineer in the U.S. Navy’s Naval Nuclear Propulsion Program. Through a licensing agreement with LANL, the company built on core technology that originated at the laboratory to develop a complete radiation transport software product, Attila, that can predict how radiation behaves in a broad range of applications faster and more accurately than just about anything else. Since the first official release of Attila in January 2004, interest has grown rapidly. Attila is now being used in over seven countries for applications as diverse as radiation shielding, radiotherapy, medical imaging, fusion research, homeland security, spacecraft design and reactor analysis. In addition, the company has received numerous Small Business Innovation Research grants, including two from the National Cancer Institute for medical imaging and radiotherapy, which total almost \$2 million. In 2007, Transpire generated close to \$1 million in revenue from software and training alone, and anticipates exceeding this in 2008. Because of these revenues and the large number of grants, Transpire will be able to broaden the software for additional markets. The software has recently been added to the short list of validated codes for International Thermonuclear Experimental Reactor (ITER) neutronics analyses. ITER is a joint international research and development project that aims to demonstrate the scientific and technical feasibility of fusion power and involves partners from all over the world. The company also has a multi-year project with Pacific Northwest National Laboratory to develop a scenario analysis tool to detect radiological threats at U.S. ports of entry. The software has been licensed by leading healthcare companies involved in both radiotherapy and medical imaging. Additionally, Transpire has active collaborations with the University of Texas M.D. Anderson Cancer Center for radiotherapy and Baylor College of Medicine ATTILA: A three-dimensional, unstructured tetrahedral mesh discrete ordinates transport codeMany applications of radiation transport require the accurate modeling of complex three-dimensional geometries. Historically, Monte Carlo codes have been used for such applications. Existing deterministic transport codes were not applied to such problems because of the difficulties of modeling complex three-dimensional geometries with rectangular meshes. The authors have developed a three-dimensional discrete ordinates ($S_{n}$) code, ATTILA, which uses linear-discontinuous finite element spatial differencing in conjunction with diffusion-synthetic acceleration (DSA) on an unstructured tetrahedral mesh. This tetrahedral mesh capability enables the authors to efficiently model complex three-dimensional geometries. One interesting and challenging application of neutron and/or gamma-ray transport is nuclear well-logging applications. Nuclear well-logging problems usually involve a complex geometry with fixed sources and one or more detectors. Detector responses must generally be accurate to within 1%. The combination of complex three-dimensional geometries and high accuracy requirements makes it difficult to perform logging problems with traditional $S_{n}$ differencing schemes and rectangular meshes. Hence, it is not surprising that deterministic $S_{n}$ codes have seen limited use in nuclear well-logging applications. The geometric modeling capabilities and the advanced spatial differencing of ATTILA give it a significant advantage, relative to traditional $S_{n}$ codes, for performing nuclear well-logging calculations. 3D unstructured-mesh radiation transport codesThree unstructured-mesh radiation transport codes are currently being developed at Los Alamos National Laboratory. The first code is ATTILA, which uses an unstructured tetrahedral mesh in conjunction with standard Sn (discrete-ordinates) angular discretization, standard multigroup energy discretization, and linear-discontinuous spatial differencing. ATTILA solves the standard first-order form of the transport equation using source iteration in conjunction with diffusion-synthetic acceleration of the within-group source iterations. DANTE is designed to run primarily on workstations. The second code is DANTE, which uses a hybrid finite-element mesh consisting of arbitrary combinations of hexahedra, wedges, pyramids, and tetrahedra. DANTE solves several second-order self-adjoint forms of the transport equation including the even-parity equation, the odd-parity equation, and a new equation called the self-adjoint angular flux equation. DANTE also offers three angular discretization options: $S_{n}$ (discrete-ordinates), $P_{n}$ (spherical harmonics), and $SP_{n}$ (simplified spherical harmonics). DANTE is designed to run primarily on massively parallel message-passing machines, such as the ASCI-Blue machines at LANL and LLNL. The third code is PERICLES, which uses the same hybrid finite-element mesh as DANTE, but solves the standard first-order form of the transport equation rather than a second-order self-adjoint form. DANTE uses a standard $S_{n}$ discretization in angle in conjunction with trilinear-discontinuous spatial differencing, and diffusion-synthetic acceleration of the within-group source iterations. PERICLES was initially designed to run on workstations, but a version for massively parallel message-passing machines will be built. The three codes will be described in detail and computational results will be presented.]]></content>
      <categories>
        <category>输运计算软件</category>
      </categories>
      <tags>
        <tag>Attila</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[中子输运方程固定源基准题]]></title>
    <url>%2F2017%2F12%2F01%2F%E4%B8%AD%E5%AD%90%E8%BE%93%E8%BF%90%E6%96%B9%E7%A8%8B%E5%9B%BA%E5%AE%9A%E6%BA%90%E5%9F%BA%E5%87%86%E9%A2%98%2F</url>
    <content type="text"><![CDATA[以下收集了几十个固定源基准题，包括题的几何，材料以及FISH0.4的计算结果。对某些问题比较了 OSG 方法和 SGS 方法的计算时间。 Fish0.4 固定源问题验证1d单单元反射边界 几何 材料 123sigma_t = 1.0sigma_s = 0.5source = 1.0 结果 1scalar_flux = source/(sigma_t - sigma_s) = 2.0 单区域反射边界 几何 材料 123sigma_t = 1.0sigma_s = 0.5source = 1.0 结果 1scalar_flux = source/(sigma_t - sigma_s) = 2.0 单区真空边界 几何 材料 123sigma_t = 5.0sigma_s = 2.0source = 3.0 结果 两区反射边界 几何 材料 材料1123sigma_t = 5.0sigma_s = 2.0source = 3.0 材料2 123sigma_t = 5.0sigma_s = 2.0source = 0.0 结果 解析问题1：强吸收问题 几何 材料 材料1123sigma_t = 5.0sigma_s = 0.0source = 1.0 材料2 123sigma_t = 5.0sigma_s = 0.0source = 0.0 结果 解析问题2：内真空问题 几何 材料 材料1123sigma_t = 0.5sigma_s = 0.0source = 1.0 材料2 123sigma_t = 0.0sigma_s = 0.0source = 0.0 材料3 123sigma_t = 0.5sigma_s = 0.0source = 0.0 结果 Reed cell 基准题 几何 材料 材料1123sigma_t = 50.0sigma_s = 0.0source = 50.0 材料2 123sigma_t = 5.0sigma_s = 0.0source = 0.0 材料3 123sigma_t = 0.0sigma_s = 0.0source = 0.0 材料4 123sigma_t = 1.0sigma_s = 0.9source = 1.0 材料5 123sigma_t = 1.0sigma_s = 0.0source = 0.0 结果 2d单单元反射边界 几何 材料 123sigma_t = 1.0sigma_s = 0.5source = 1.0 结果 1scalar_flux = source/(sigma_t - sigma_s) = 2.0 单区域反射边界 几何 材料 123sigma_t = 1.0sigma_s = 0.5source = 1.0 结果 1scalar_flux = source/(sigma_t - sigma_s) = 2.0 两区域反射边界 几何 材料 材料1123sigma_t = 1.0sigma_s = 0.5source = 1.0 材料2123sigma_t = 1.0sigma_s = 0.25source = 0.0 结果 两区域真空边界 几何 材料 材料1123sigma_t = 0.5sigma_s = 0.4source = 1.0 材料2123sigma_t = 0.5sigma_s = 0.4source = 0.0 结果 计算时间网格量 1200 meshs，计算时间如下 Pn order OSG计算时间 OSG 迭代次数 SGS 计算时间 SGS 迭代次数 P1 0.57s 51 0.07s 34 P3 0.33s 43 0.31s 34 P5 0.78s 43 1.55s 35 P7 1.86s 44 5.94s 36 P9 4.37s 43 18.95s 36 P11 7.72s 41 43.83s 36 P13 15.00s 41 98.17s 36 P15 26.47s 40 184.7s 34 reed cell基准题 几何 材料 材料1123sigma_t = 50.0sigma_s = 0.0source = 50.0 材料2 123sigma_t = 5.0sigma_s = 0.0source = 0.0 材料3 123sigma_t = 0.0sigma_s = 0.0source = 0.0 材料4 123sigma_t = 1.0sigma_s = 0.9source = 1.0 材料5 123sigma_t = 1.0sigma_s = 0.0source = 0.0 结果 计算时间网格量 1926 meshs，计算时间如下| Pn order | OSG计算时间 | OSG 迭代次数 | SGS 计算时间 | SGS 迭代次数 || :——- | :———–|:———- |:———– |:————|| P1 | 1.02s | 416 | 0.57s | 451 || P3 | 2.42s | 417 | 6.52s | 1061 || P5 | 4.89s | 417 | 28.0s | 1318 || P7 | 11.81s | 464 | 61.7s | 1190 || P9 | 48.00s | 1000($10^{-4}$) | - | - | 内真空问题 (Maynard 强散射基准题) 几何 材料 材料1123sigma_t = 0.2sigma_s = 0.19source = 1.0 材料2123sigma_t = 0.0sigma_s = 0.0source = 0.0 材料3123sigma_t = 0.2sigma_s = 0.19source = 0.0 结果 该问题计算到 P9 时达到最大迭代次数 1000, 收敛到$ 10^{-3}$，更高阶的计算不收敛。 Pn 方法存在一定的问题。 计算时间网格量 4400 meshs，计算时间如下 Pn order OSG计算时间 OSG 迭代次数 SGS 计算时间 SGS 迭代次数 P1 2.23s 736 4.43s 1577 P3 9.72s 829 38.42s 2638 P5 22.92s 823 140.4s 2887 P7 48.41s 818 365.0s 3151 P9 92.24s 1000($10^{-3}$) - - 直管道问题 几何 材料 材料1123sigma_t = 0.5sigma_s = 0.0source = 1.0 材料2123sigma_t = 0.0sigma_s = 0.0source = 0.0 材料3123sigma_t = 0.5sigma_s = 0.0source = 0.0 结果 计算时间网格量 3300 meshs，计算时间如下 Pn order OSG计算时间 OSG 迭代次数 SGS 计算时间 SGS 迭代次数 P1 0.92s 272 0.75 384 P3 2.90s 292 5.58 488 P5 7.91s 393 25.04s 682 P7 23.61s 451 83.88s 730 P9 78.24s 1000($10^{-3}$) - - 弯管道问题 几何 材料 材料1123sigma_t = 0.5sigma_s = 0.0source = 1.0 材料2123sigma_t = 0.0sigma_s = 0.0source = 0.0 材料3123sigma_t = 0.5sigma_s = 0.0source = 0.0 结果 计算时间网格量 2700 meshs，计算时间如下 Pn order OSG计算时间 OSG 迭代次数 SGS 计算时间 SGS 迭代次数 P1 0.79s 237 0.46s 309 P3 2.20s 291 3.48s 380 P5 5.81s 357 15.64s 407 P7 14.51s 406 44.30s 419 P9 57.22s 1000($10^{-4}$) - - 铁水屏蔽问题 (深穿透问题) 几何 材料 材料1123sigma_t = 3.33sigma_s = 0.01998source = 1.0 材料2123sigma_t = 3.33sigma_s = 0.01998source = 0.0 材料3123sigma_t = 1.33sigma_s = 0.22477source = 0.0 结果 计算时间网格量 10000 meshs，计算时间如下 Pn order OSG计算时间 OSG 迭代次数 SGS 计算时间 SGS 迭代次数 P5 4.01s 5 10.74s 6 强吸收问题 几何 材料 材料1123sigma_t = 1000.0sigma_s = 0.0source = 1000.0 材料2123sigma_t = 1000.0sigma_s = 0.0source = 0.0 材料3123sigma_t = 0.1sigma_s = 0.0source = 0.0 结果 计算时间网格量 2586 meshs，计算时间如下 Pn order OSG计算时间 OSG 迭代次数 SGS 计算时间 SGS 迭代次数 P1 1.75s 158 0.48s 134 P3 1.42s 164 1.21s 135 P5 2.48s 144 5.84s 132 P7 5.56s 124 20.11s 126 P9 10.08s 120 46.79s 117 P11 31.08s 119 107.8s 109 P13 47.6s 118 232.3s 103 P15 67.51s 119 461.5s 98 3d单单元反射边界 几何 材料1 123sigma_t = 1.0sigma_s = 0.5source = 1.0 材料1 123sigma_t = 1.0sigma_s = 0.5source = 1.0 结果 1scalar_flux = source/(sigma_t - sigma_s) = 2.0 单区域反射边界 几何 材料 123sigma_t = 1.0sigma_s = 0.5source = 1.0 结果 1scalar_flux = source/(sigma_t - sigma_s) = 2.0 两区域反射边界 几何 材料1 123sigma_t = 1.0sigma_s = 0.5source = 1.0 材料2 123sigma_t = 1.0sigma_s = 0.5source = 0.0 结果 kobayashi 1i 几何 材料1 123sigma_t = 0.1sigma_s = 0.0source = 1.0 材料2 123sigma_t = 1.0e-4sigma_s = 0.0source = 0.0 材料3 123sigma_t = 0.1sigma_s = 0.0source = 0.0 结果 kobayashi 1ii 几何 材料1 123sigma_t = 0.1sigma_s = 0.05source = 1.0 材料2 123sigma_t = 0.0sigma_s = 0.0source = 0.0 材料3 123sigma_t = 0.1sigma_s = 0.05source = 0.0 结果 kobayashi 2i 几何 材料1 123sigma_t = 0.1sigma_s = 0.0source = 1.0 材料2 123sigma_t = 1.0e-4sigma_s = 0.0source = 0.0 材料3 123sigma_t = 0.1sigma_s = 0.0source = 0.0 结果 kobayashi 2ii 几何 材料1 123sigma_t = 0.1sigma_s = 0.05source = 1.0 材料2 123sigma_t = 0.0sigma_s = 0.0source = 0.0 材料3 123sigma_t = 0.1sigma_s = 0.05source = 0.0 结果 kobayashi 3i 几何 材料1 123sigma_t = 0.1sigma_s = 0.0source = 1.0 材料2 123sigma_t = 1.0e-4sigma_s = 0.0source = 0.0 材料3 123sigma_t = 0.1sigma_s = 0.0source = 0.0 结果 kobayashi 3ii 几何 材料1 123sigma_t = 0.1sigma_s = 0.05source = 1.0 材料2 123sigma_t = 0.0sigma_s = 0.0source = 0.0 材料3 123sigma_t = 0.1sigma_s = 0.05source = 0.0 结果]]></content>
      <categories>
        <category>基准题</category>
      </categories>
      <tags>
        <tag>中子输运方程</tag>
        <tag>benchmark</tag>
        <tag>基准题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[有限元基本数据结构]]></title>
    <url>%2F2017%2F11%2F23%2F%E6%9C%89%E9%99%90%E5%85%83%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2F</url>
    <content type="text"><![CDATA[该文描述了有限元方法中使用的基本数据，变量的符号说明，以及计算一些基本数据的流程，包括 esp (elements surrounding points)，psp (points surrounding points)，ese (elements surrounding elements), edges 等数据的计算过程。还分析了Edge-based数据结构与element-based的计算量。 变量说明基本的离散数据123456789101112131415161718192021nelem，单元数目npoin，节点数目nedge，边数npsup，围绕一点的点数ndim，空间维度nnode，单元中节点数目inpoel(1:nnode, 1:nelem)，连接数组，存储每个单元中节点编号index-position-elementcoord(1:ndimn, 1:npoin) ，坐标数组，存储每个节点的坐标。数组inpoel，coord定义了几何的网格离散方式nunkp，每个节点上的未知量数目nunke，每个单元上的未知量数目unknp(1:nunkp, 1:npoin)，节点上的未知量unkne(1:nunke, 1:nelem)，单元上的未知量nconi，每个边界点上的边界条件数目nboup，边界上的节点数目bcond(1:nconi, 1:nboup)，每个边界点上的边界条件bcond(1,iboup)，存储边界上第i点的编号bcond(2:nconi,iboup)，存储边界上第i点的边界条件 派生数据esup (elements surrounding points)由inpoel派生出的，包含两个数组12esup1(1:mesup)，存储围绕节点的单元编号esup2(1:npoin+1)，存储围绕节点的单元的位置 比如围绕节点 ipoin 的单元存储位置为esup1( esup2(ipoin)+1:esup2(ipoin+1) )，参考下图 计算这两个数组过程 psup (points surrounding points)同样包含两个数组12psup1(1:mpsup)，存储围绕节点的节点编号psup2(1:npoin+1)，存储围绕节点的节点的位置 比如围绕节点 ipoin 的节点存储位置为psup1( psup2(ipoin)+1:psup2(ipoin+1) ). 计算这两个数组需要用到 esup, 具体过程如下 esuel (elements surrounding elements)12esuel(1:nfael, 1:nelem)，存储围绕每个单元的单元编号nfael，每个单元的边界面数目 计算过程如下 其中某些辅助数组含义如下 edges边存储结构常用来减少线性单元的计算量和存储量，存储离散网格中每条边的端点，用一个数组存储1inpoed(1:2,1:nedge)，存储离散网格中边的端点， 其中inpoed(1, iedge) &lt; inpoed(2, iedge). 对于线性单元，物理上的边 $\vec{ij}$ 与数值上的边 $K_{ij}$是一一对应的，数值上的边表示矩阵中的非零元素。 可以直接利用 psp 进行计算得到 形状函数及其导数1234geome(1:ndimn*nnode, 1:nelem)，存储每个单元中形状函数的导数geome(ndimn*nnode+1,1:nelem)，存储每个单元的体积cedge(ncoef,nedge)，每条边上的系数 有限元中线性单元中点，边，单元的数目 三角形 123nelem = 2*npoinnedge = 3*npoinnpsup = 6*npoin 四面体123nelem = 5.5*npoinnedge = 7*npoinnpsup = 14*npoin Edge-based数据结构不同形式数据结构的计算量 Laplacian组装花销以及计算FLOPS花销 RHS组装花销以及计算FLOPS花销]]></content>
      <categories>
        <category>有限元</category>
      </categories>
      <tags>
        <tag>有限元</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一阶中子输运方程FSGS离散]]></title>
    <url>%2F2017%2F11%2F20%2F%E4%B8%80%E9%98%B6%E4%B8%AD%E5%AD%90%E8%BE%93%E8%BF%90%E6%96%B9%E7%A8%8BFSGS%E7%A6%BB%E6%95%A3%2F</url>
    <content type="text"><![CDATA[SGS方法是A.G.Buchan在文献 1 中提出的对一阶中子输运方程稳定的有限元方法。然后在文献 2 中提出了一种更加高效的方法叫 ESGS 方法。在此基础上我提出了一种快速的SGS方法叫FSGS方法，这种方法比ESGS效率要高很多，因为不用进行特征值分解和矩阵求逆。 SGS 方法SGS(Sub-Grid Scale)方法是将间断有限元与连续有限元结合起来的一种方法，在不增加变量的情况下能够保证方程的稳定性。该方法将变量分为连续部分与间断部分之和，其中$ ϕ_c$为连续部分，$ϕ_d$为间断部分，最终会形成两个方程$$ϕ = ϕ_c+ϕ_d$$ 其弱形式为$$(φ_c,Ω⋅∇ϕ)+(φ_c,σϕ) = (φ_c,s) \tag{$1$}$$ $$(φ_d,Ω⋅∇ϕ)+(φ_d,σϕ) = (φ_d,s) \tag{$2$}$$ 其中方程1是针对全局的，对$ϕ$分部积分$$&lt;φ_c,Ω⋅nϕ&gt; - (Ω⋅∇φ_c,ϕ)+(φ_c,σϕ) = (φ_c,s)$$ 方程2是针对每个单元的，对$ϕ_d$分部积分$$&lt;φ_d,Ω⋅nϕ_d&gt; - (Ω⋅∇φ_d,ϕ_d)+(φ_d,Ω⋅∇ϕ_c)+(φ_d,σϕ) = (φ_d,s)$$ SGS方法假设对于区域边界，有如下边界条件$$&lt;φ,Ω⋅nϕ_c&gt;^{-} = G$$ $$&lt;φ,Ω⋅nϕ_d&gt; = 0$$ 对于内部单元边界$$&lt;φ_d,Ω⋅nϕ_d&gt;^{-} = 0$$ 所以带入边界条件得$$&lt;φ_c,Ω⋅nϕ_c&gt;^{+} - (Ω⋅∇φ_c,ϕ)+(φ_c,σϕ) = (φ_c,s) - G \tag{$3$}$$ $$&lt;φ_d,Ω⋅nϕ_d&gt;^{+} - (Ω⋅∇φ_d,ϕ_d)+(φ_d,Ω⋅∇ϕ_c)+(φ_d,σϕ) = (φ_d,s) \tag{$4$}$$ 定义矩阵$$A = - (Ω⋅∇φ_c,φ_c)+(φ_c,σφ_c) + &lt;φ_d,Ω⋅nφ_d&gt;^{+}$$ $$B = - (Ω⋅∇φ_c,φ_d)+(φ_c,σφ_d)$$ $$C = (φ_d,Ω⋅∇φ_c)+(φ_d,σφ_c)$$ $$D = - (Ω⋅∇φ_d,φ_d)+(φ_d,σφ_d) + &lt;φ_d,Ω⋅nφ_d&gt;^{+} $$ $$s_c = (φ_c,s) - G$$ $$s_d = (φ_d,s)$$ 所以 $$Aϕ_c+Bϕ_d = s_c \tag{$5$}$$ $$Cϕ_c+Dϕ_d = s_d \tag{$6$}$$ 由方程 6 得 $$\phi_d=D^{-1}(s_d - C\phi_c)$$ 将其带入方程5中，得 $$[A-BD^{-1}C ]\phi_c= s_c-BD^{-1}s_d \tag{$7$}$$ 求解方程 7 得到解 $\phi_c$ FSGS 方法在SGS方法中，虽然矩阵 $D$ 只用在每个小单元上求解，但在每个单元上需要求 $&lt;φ_d,Ω⋅nφ_d&gt;^{+}$，所以需要在每个单元上进行黎曼分解，而且在每个单元上都需要求 $D^{-1}$，这两个过程都是比较耗时的。在FSGS方法中提出了一种新的方法使得矩阵 $D$ 变为一个对角矩阵，并且过程中不需要进行特征值分解，所以效率会提高很多。 该方法在每个单元上假设满足$Ω\cdot ∇\phi_d = c\phi_d$, 其中c为任意常数，所以方程 2 变为 $$(φ_d,(c+σ)\phi_d) + (φ_d,Ω⋅∇ϕ_c)+(φ_d,σϕ_c) = (φ_d,s) $$ 所以矩阵 $D$ 变为以下形式 $$D = (φ_d,(c+σ)φ_d)$$ 然后通过质量矩阵集中技巧将矩阵 $D$ 对角化(对角元素等于每一行元素之和)，得到对角矩阵 $D_d$，然后将该矩阵带入方程 7 中进行求解。$$[A-BD_d^{-1}C ]\phi_c= s_c-BD_d^{-1}s_d \tag{$8$}$$ Buchan A G, Candy A S, Merton S R, et al. The Inner-Element Subgrid Scale Finite Element Method for the Boltzmann Transport Equation[J]. Nuclear Science &amp; Engineering the Journal of the American Nuclear Society, 2010, 1030(2):1031-1031. Buchan A G, Pain C C. An efficient space-angle subgrid scale discretisation of the neutron transport equation[J]. Annals of Nuclear Energy, 2016, 94:440-450.]]></content>
      <categories>
        <category>中子输运方程</category>
      </categories>
      <tags>
        <tag>SGS</tag>
        <tag>FSGS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[输运方程变分形式的守恒关系]]></title>
    <url>%2F2017%2F11%2F16%2F%E8%BE%93%E8%BF%90%E6%96%B9%E7%A8%8B%E5%8F%98%E5%88%86%E5%BD%A2%E5%BC%8F%E7%9A%84%E5%AE%88%E6%81%92%E5%85%B3%E7%B3%BB%2F</url>
    <content type="text"><![CDATA[方程变分形式的妙处在于很容易得到物理上的守恒关系，守恒关系包括全局守恒和局部守恒。前者表示在整个求解区域上产生的粒子与消失的粒子相等，后者表示在一个单元上产生和消失的粒子相等。守恒关系为：消失=产生，消失包括：泄露，反应，产生由源项产生。以下对输运方程的各种变分形式的守恒形式进行说明 CG 方程中子输运方程连续有限元的变分形式为 $$&lt;φ,Ω⋅nϕ&gt; - (Ω⋅∇φ,ϕ)+(φ,σϕ) = (φ,s)$$ 令检验函数 $φ$在整个区域中恒为 1，那么 $$ +(1,σϕ) = (1,s)$$ 该式第一项为泄漏率，第二项为反应消失率，右端项为产生率 SAAF 方程SAAF方程的变分形式为 $$&lt;φ,Ω⋅nϕ&gt; + (Ω⋅∇φ, \frac{1}{σ}Ω⋅∇ϕ)+(φ,σϕ) = (Ω⋅∇φ,\frac{1}{σ}s)+(φ,s)$$ 令检验函数 $φ$在整个区域中恒为 1，那么 $$ +(1,σϕ) = (1,s)$$ 满足守恒关系 LS 方程LS 方程的变分形式为 $$(Ω⋅∇φ,Ω⋅∇ϕ) + (σφ,Ω⋅∇ϕ) + (Ω⋅∇φ,σϕ) + (σφ,σϕ) - ^{-} = (Ω⋅∇φ,s)+ (σφ,s)$$ 令检验函数 $φ$在整个区域中恒为 1，那么$$&lt;σ,Ω⋅nϕ&gt; + (σ,σϕ) - ^{-} = (σφ,s)$$ 如果在整个区域上 $σ$ 为大于零的常数，并且 $c=σ$；方程才是全局守恒的，否则不是。 对于真空区域$$(Ω⋅∇φ,Ω⋅∇ϕ) - ^{-} = 0$$所以$$(Ω⋅∇φ,Ω⋅∇ϕ)+ (cφ,Ω⋅∇ϕ) + (Ω⋅∇φ,cϕ)-^{+} + ^{-} = 0$$令检验函数 $φ$在整个区域中恒为 1，那么$$ (c,Ω⋅∇ϕ)-^{+} + ^{-} = 0$$只有当 $Ω⋅∇ϕ $ 恒等于零时，才满足守恒关系。即在真空区域要恒满足输运方程 $Ω⋅∇ϕ=0$，数值误差为0。 SUPG 方程SUPG 方程的变分形式为 $$&lt;φ,Ω⋅nϕ&gt; -(Ω⋅∇φ,ϕ)+(φ,σϕ) + (τΩ⋅∇φ,Ω⋅∇ϕ)+(τΩ⋅∇φ,σϕ) = (φ,s)+ (τΩ⋅∇φ,s)$$ 令检验函数 $φ$在整个区域中恒为 1，那么 $$ +(1,σϕ) = (1,s)$$ 满足守恒关系 SGS 方程SGS 方程的变分形式为$$&lt;φ_c,Ω⋅nϕ&gt; - (Ω⋅∇φ_c,ϕ)+(φ_c,σϕ) = (φ_c,s)$$ $$&lt;φ_d,Ω⋅nϕ_d&gt; - (Ω⋅∇φ_d,ϕ_d)+(φ_d,Ω⋅∇ϕ_c)+(φ_d,σϕ) = (φ_d,s)$$ 令检验函数 $φ_c$在整个区域中恒为 1，那么$$ +(1,σϕ) = (1,s)$$ 满足全局守恒关系 令检验函数 $φ_d$在单元中恒为 1，那么$$ +(1,Ω⋅∇ϕ_c)+(1,σϕ) = (1,s)$$ $$ +(1,σϕ) = (1,s)$$满足局部守恒关系]]></content>
      <categories>
        <category>中子输运方程</category>
      </categories>
      <tags>
        <tag>变分</tag>
        <tag>守恒</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[二阶中子输运方程]]></title>
    <url>%2F2017%2F11%2F16%2F%E4%BA%8C%E9%98%B6%E4%B8%AD%E5%AD%90%E8%BE%93%E8%BF%90%E6%96%B9%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[由于一阶中子输运方程是一个双曲方程，要用有限元方法求解该方程，必须使用一种迎风格式的方法或将该方程变为二阶椭圆形式的方程。以下对二阶形式的中子输运方程进行研究，主要包括自共轭形式的中子输运方程(SAAF)；最小二乘形式的中子输运方程(LS)；流线扩散形式(SUPG)。 SAAF该方法使用角通量方程(Angular Flux Equation(AFE))将一阶方程中的泄露项转变为二阶形式。 中子输运方程$$Ω⋅∇ϕ+σϕ = s \tag{$1$}$$ 弱形式$$(φ,Ω⋅∇ϕ)+(φ,σϕ) = (φ,s) \tag{$2$}$$ 分部积分$$&lt;φ,Ω⋅nϕ&gt; - (Ω⋅∇φ,ϕ)+(φ,σϕ) = (φ,s) \tag{$3$}$$ 角通量方程$$ϕ = \frac{1}{σ}(s-Ω⋅∇ϕ) \tag{$4$}$$ SAAF弱形式将角通量方程(4)带入原方程的弱形式(3)中的一阶导数项，得 $$&lt;φ,Ω⋅nϕ&gt; + (Ω⋅∇φ, \frac{1}{σ}Ω⋅∇ϕ)+(φ,σϕ) = (Ω⋅∇φ,\frac{1}{σ}s)+(φ,s) \tag{$5$}$$ 该形式由于存在 $\frac{1}{σ}$，所以不能对真空区域进行求解。 处理真空SAAF-VT将$\frac{1}{σ}Ω⋅∇ϕ$变为 $\tauΩ⋅∇ϕ+ (\tau σ - 1)ϕ$，其中 $\tau = min( \frac{1}{σ}, \frac{h}{c})$，其中 $h$ 为网格的特征大小，c为一个常数，通常取2。所以方程 (5) 变为 $$&lt;φ,Ω⋅nϕ&gt; + (Ω⋅∇φ, \tauΩ⋅∇ϕ) + (Ω⋅∇φ, (\tau σ -1)ϕ)+(φ,σϕ) = (Ω⋅∇φ,\frac{1}{σ}s)+(φ,s) \tag{$5$}$$ 不过以下文献提到该方法只对$S_N$方法有效，对$P_N$方法不对。主要是因为一阶$P_N$公式在真空区域是病态的，因为在高维(2d,3d)情况下，角度JACOBI矩阵是奇异的。 Laboure V M. Improved fully-implicit spherical harmonics methods for first and second order forms of the transport equation using Galerkin Finite Element[D]. 2016. LS最小二乘公式的推导方式有很多种，可以从变分原理出发，也可以从加权残值法出发。以下从最小二乘泛函出发推导。令 $T = Ω⋅∇+σ$, 定义输运方程的全局残差的二范数 $$R = \int_v \int_{Ω} (T\phi - s)^2dΩdV$$ 对输运方程求解就是要使残差最小，即该泛函的一阶变分为零，所以 $$δR = 2 \int_v \int_{Ω} Tδϕ(T\phi - s)dΩdV = 0$$ 所以，最小二乘方法的弱形式为 $$(Tδϕ,Tϕ) = (Tδϕ,s)$$ 令 $φ = δϕ$，所以 $$(Ω⋅∇φ,Ω⋅∇ϕ) + (σφ,Ω⋅∇ϕ) + (Ω⋅∇φ,σϕ) + (σφ,σϕ)= (Ω⋅∇φ,s)+ (σφ,s)$$ 边界条件最小二乘方法的边界条件不好处理，对于$S_N$方法可以全部使用强制边界条件；而对于$P_N$方法，需要使用弱形式的边界条件，即在原来变分形式中减去边界上的变分的 $c$ 倍，即 $$(Ω⋅∇φ,Ω⋅∇ϕ) + (σφ,Ω⋅∇ϕ) + (Ω⋅∇φ,σϕ) + (σφ,σϕ) - ^{-} = (Ω⋅∇φ,s)+ (σφ,s)$$ 其中c是一个常数，c的选取是一个很重要的问题。 与SAAF等价条件如果$σ$在区域中是一个常数，则对最小二乘方程乘以 $\frac{1}{σ}$，则方程变为$$&lt;φ,Ω⋅nϕ&gt; + (Ω⋅∇φ, \frac{1}{σ}Ω⋅∇ϕ)+(φ,σϕ) - &lt;\frac{c}{σ}φ,ϕ-g&gt;^{-}= (Ω⋅∇φ,\frac{1}{σ}s)+(φ,s) $$ 所以当 $c = σ$时，LS方程与SAAF方程是完全等价的，此时必须满足 $σ&gt;0$，所以不适用于真空区域。 与SAAF-VT等价条件当 $c = \frac{1}{\tau} = max(σ,\frac{c_s}{h})$ 时，最小二乘方程与SAAF-VT等价，此时可以用于真空区域求解。 SUPG流线扩散方法属于Petrov Galerkin 方法，该方法的检验函数与试探函数所在的空间不一样，检验函数所在的空间为 $φ+τΩ⋅∇φ$，所以输运方程的弱形式为$$(φ,Ω⋅∇ϕ)+(φ,σϕ) + (τΩ⋅∇φ,Ω⋅∇ϕ)+(τΩ⋅∇φ,σϕ) = (φ,s)+ (τΩ⋅∇φ,s)$$ 与SAAF等价条件如果 $\tau = \frac{1}{σ}$，则该式与SAAF一样$$&lt;φ,Ω⋅nϕ&gt; + (Ω⋅∇φ, \frac{1}{σ}Ω⋅∇ϕ)+(φ,σϕ) = (Ω⋅∇φ,\frac{1}{σ}s)+(φ,s) $$ 与SAAF-VT等价条件如果 $\tau = min( \frac{1}{σ}, \frac{h}{c})$，则该式与SAAF-VT一样。即 SUPG方法中$\tau$取值与SAAF-VT中取值是一样的。实际上SAAF-VT方法就是 SUPG方法。]]></content>
      <categories>
        <category>中子输运方程</category>
      </categories>
      <tags>
        <tag>SAAF</tag>
        <tag>GLS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[纯吸收介质中输运方程解析解]]></title>
    <url>%2F2017%2F11%2F15%2F%E7%BA%AF%E5%90%B8%E6%94%B6%E4%BB%8B%E8%B4%A8%E4%B8%AD%E8%BE%93%E8%BF%90%E6%96%B9%E7%A8%8B%E8%A7%A3%E6%9E%90%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[输运方程在单能，纯吸收介质的固定源问题中有解析解。下面对解析解进行推导 单能纯吸收介质的解析解$$\phi(r,\Omega)= \int s(r,Ω)exp(-\intσ_a(l’)dl’)dl$$ 源区内$$\phi(r,\Omega)= \int s(r,Ω)exp(-\int_0^lσ_a(l’)dl’)dl$$ 假设只有一个源区，并且源区内的吸收截面为常数 $σ_{a,1}$，所以$$\phi(r,\Omega)=\int s(r,Ω)exp(-σ_{a,1}l)dl = \frac{s(r,Ω)}{σ_{a,1}}(1-exp(-σ_{a,1}l_0(r,Ω))$$ 其中 $l_0(r,Ω)$为$r$处沿着 $\Omega$方向到源区边界的距离。 源区外$$\phi(r,\Omega)= \int s(r,Ω)exp(-\int_0^lσ_a(l’)dl’)dl$$ 假设一共有$n$个区域，每个区域的吸收截面为 $σ_{a,i}$，则$$\phi(r,\Omega)= \int_{l_0(r,Ω)}^{l_1(r,Ω)} s(r,Ω)exp(-\sigma_{a,1}(l-l_1)) \prod_{i=2}^{n}exp(-σ_{a,i}\delta l_i(r,Ω))dl$$ 所以$$\phi(r,\Omega) = \frac{s(r,Ω)}{σ_{a,1}}(1-exp(-σ_{a,1}δl_1(r,Ω))\prod_{i=2}^{n}exp(-σ_{a,i}\delta l_i(r,Ω))dl$$]]></content>
      <categories>
        <category>输运方程</category>
      </categories>
      <tags>
        <tag>基准题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《三体1-地球往事》读后感]]></title>
    <url>%2F2017%2F11%2F07%2F%E3%80%8A%E4%B8%89%E4%BD%931-%E5%9C%B0%E7%90%83%E5%BE%80%E4%BA%8B%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F%2F</url>
    <content type="text"><![CDATA[看完了《三体1.地球往事》，觉得整部小说描写的是一种宇宙道德图景，从人类文明写到星际文明，文中描述的宇宙道德图景是黑暗的，几乎处于无道德状态，这种状态让人心寒，让人细思极恐。文中一些细节方面提出的问题也很有意思，让人深思 规律在时间和空间上是不是均匀的？如果规律从来如此，那是如何而来？如果如此，那么规律的物质基础还不存在的时候，规律便已经存在了？当原子还不存在的时候便有了原子的规律，当化学物质还不存在的时候就有了化学规律，当生命还不存在的时候便有了生物规律，当人类还不存在的时候就有了人的规律？我不认为事实是这样，就像代码应该是电脑出现之后才出现的产物，并且还处于一定变化之中，我认为规律就像整个宇宙的软件，也是在物质这种硬件出现之后才出现的，并且还处于一定变化之中。我觉得规律是在事物不断发展变化中逐渐形成的，是在千万次的重复中形成的惯性。感觉宇宙就像是一个自我学习的进化系统。我相信 “道，行之而成” 群体无意识是一种什么状态？人类群体究竟会疯狂到一种什么样的地步，在文化大革命中，大部分人群都失去了自己的理性判断，处于一种群体无意识状态，做出一些疯狂的举动。群体就像一个活的生物，只是这个生物目前还处于一种比较原始的阶段，基本上都是处于一种无意识的状态，这种无意识可能会摧毁个人的理性判断，使整个人群回到野蛮阶段。 道德是如何产生的？我觉得目前人类社会的道德基石是平等，公平，正义。而这种道德是如何产生的呢？我觉得很大一部分原因是由于我们处于一个商业社会之中，整个社会实现了很复杂的分工合作，人们通过等价交换来获取自己需要的物资，这种交换是要求一种公正道德的。只有社会处于一种公正之中，社会协作的效率才会提高，社会才会向前发展。]]></content>
      <categories>
        <category>小说</category>
      </categories>
      <tags>
        <tag>三体</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一阶中子输运方程稳定有限元方法]]></title>
    <url>%2F2017%2F11%2F06%2F%E4%B8%80%E9%98%B6%E4%B8%AD%E5%AD%90%E8%BE%93%E8%BF%90%E6%96%B9%E7%A8%8B%E7%A8%B3%E5%AE%9A%E6%9C%89%E9%99%90%E5%85%83%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[标准的Galerkin有限元方法只适用于椭圆方程，直接应用于双曲方程会产生伪震荡，所以需要一些技巧来消除这些震荡，使解变得稳定。这些技巧主要有两个方面：第一是将一阶的双曲方程变为二阶的椭圆方程，比如最小二乘方法（GLS)、迎风流线扩散方法(SUPG)等；另一种是将离散的格式写为迎风格式，比如间断有限元(DG)等，以下对这些稳定算法进行简要的介绍。 Galerkin离散过程输运方程$$Ω⋅∇ϕ+σϕ = s$$ 弱形式$$(φ,Ω⋅∇ϕ)+(φ,σϕ) = (φ,s)$$ 分部积分$$&lt;φ,Ω⋅nϕ&gt; - (Ω⋅∇φ,ϕ)+(φ,σϕ) = (φ,s)$$ 边界条件$$&lt;φ,Ω⋅nϕ&gt;^{-} = G$$ 带边界条件的方程$$&lt;φ,Ω⋅nϕ&gt;^{+} - (Ω⋅∇φ,ϕ)+(φ,σϕ) = (φ,s) - G$$ 等价方程1$$ -&lt;φ,Ω⋅nϕ&gt;^{-} + (φ,Ω⋅∇ϕ)+(φ,σϕ) = (φ,s)-G$$ 等价方程2$$ [&lt;φ,Ω⋅nϕ&gt;^{+}-&lt;φ,Ω⋅nϕ&gt;^{-}] /2 + [(φ,Ω⋅∇ϕ)- (Ω⋅∇φ,ϕ)]/2+(φ,σϕ) = (φ,s)-G$$ 矩阵形式定义$$L = (φ,Ω⋅∇φ)$$ $$R = (φ,σφ)$$ $$O = &lt;φ,Ω⋅nφ&gt;$$ $$O^{+} = &lt;φ,Ω⋅nφ&gt;^{+}$$ $$O^{-} = &lt;φ,Ω⋅nφ&gt;^{-}$$ $$b = (φ,s)-G$$ 所以Galerkin离散后的方程为$$[L - O^{-}+R]ϕ = b$$ $$[ -L^{T}+ O^{+}+R]ϕ = b$$ $$[ (L-L^{T})/2+(O^{+}-O^{-})/2+R]ϕ = b$$ SUPG (Streamline Upwinding Petrov Galerkin)离散过程流线扩散方法属于Petrov Galerkin 方法，该方法的检验函数与试探函数所在的空间不一样，检验函数所在的空间为 $φ+τΩ⋅∇φ$，所以输运方程的弱形式为$$(φ,Ω⋅∇ϕ)+(φ,σϕ) + (τΩ⋅∇φ,Ω⋅∇ϕ)+(τΩ⋅∇φ,σϕ) = (φ,s)+ (τΩ⋅∇φ,s)$$ 矩阵形式定义$$D=(τΩ⋅∇φ,Ω⋅∇ϕ)$$ $$C_{r}^{T} = (τΩ⋅∇φ,σϕ)$$ $$b = (φ,s)+ (τΩ⋅∇φ,s)-G$$ 所以SUPG离散之后的方程为$$[-L^{T}+ O^{+}+R + D + L_{r}^{T}]ϕ = b$$ 对于非真空区域，取$τ = \frac{1}{σ}$，则$L_{r}^{T} = L^{T}$，所以此时$$[ O^{+}+R + D ]ϕ = b$$ GLS (Galerkin Least Squares)最小二乘公式的推导方式有很多种，可以从变分原理出发，也可以从加权残值法出发。以下从最小二乘泛函出发推导。令 $T = Ω⋅∇+σ$, 定义输运方程的全局残差的二范数 $$R = \int_v \int_{Ω} (T\phi - s)^2dΩdV$$ 对输运方程求解就是要使残差最小，即该泛函的一阶变分为零，所以 $$δR = 2 \int_v \int_{Ω} Tδϕ(T\phi - s)dΩdV = 0$$ 所以，最小二乘方法的弱形式为 $$(Tδϕ,Tϕ) = (Tδϕ,s)$$ 令 $φ = δϕ$，所以 $$(Ω⋅∇φ,Ω⋅∇ϕ) + (σφ,Ω⋅∇ϕ) + (Ω⋅∇φ,σϕ) + (σφ,σϕ)= (Ω⋅∇φ,s)+ (σφ,s)$$ 边界条件最小二乘方法的边界条件不好处理，对于$S_N$方法可以全部使用强制边界条件；而对于$P_N$方法，需要使用弱形式的边界条件，即在原来变分形式中减去边界上的变分的 $c$ 倍，即 $$(Ω⋅∇φ,Ω⋅∇ϕ) + (σφ,Ω⋅∇ϕ) + (Ω⋅∇φ,σϕ) + (σφ,σϕ) - ^{-} = (Ω⋅∇φ,s)+ (σφ,s)$$ 其中c是一个常数，c的选取是一个很重要的问题。 SGS (Sub-Grid Scale)离散过程该方法将变量分为连续部分与间断部分之和，其中$ ϕ_c$为连续部分，$ϕ_d$为间断部分，最终会形成两个方程$$ϕ = ϕ_c+ϕ_d$$ 其弱形式为$$(φ_c,Ω⋅∇ϕ)+(φ_c,σϕ) = (φ_c,s) \tag{$1$}$$ $$(φ_d,Ω⋅∇ϕ)+(φ_d,σϕ) = (φ_d,s) \tag{$2$}$$ 对方程1的$ϕ$分部积分$$&lt;φ_c,Ω⋅nϕ&gt; - (Ω⋅∇φ_c,ϕ)+(φ_c,σϕ) = (φ_c,s)$$ 对方程2的$ϕ_d$分部积分$$&lt;φ_d,Ω⋅nϕ_d&gt; - (Ω⋅∇φ_d,ϕ_d)+(φ_d,Ω⋅∇ϕ_c)+(φ_d,σϕ) = (φ_d,s)$$ 对于区域边界，有如下边界条件$$&lt;φ,Ω⋅nϕ_c&gt;^{-} = G$$ $$&lt;φ,Ω⋅nϕ_d&gt; = 0$$ 对于内部单元边界$$&lt;φ_d,Ω⋅nϕ_d&gt;^{-} = 0$$ 带入边界条件得$$&lt;φ_c,Ω⋅nϕ_c&gt;^{+} - (Ω⋅∇φ_c,ϕ)+(φ_c,σϕ) = (φ_c,s) - G$$ $$&lt;φ_d,Ω⋅nϕ_d&gt;^{+} - (Ω⋅∇φ_d,ϕ_d)+(φ_d,Ω⋅∇ϕ_c)+(φ_d,σϕ) = (φ_d,s)$$ 矩阵形式$$[ O^{+}-L^{T}+R]ϕ_c+[ -L^{T}+R]ϕ_d = s_c \tag{$3$}$$ $$[ L+R]ϕ_c+[ O^{+}-L^{T}+R]ϕ_d = s_d \tag{$4$}$$ 方程(3)描述整个求解区域，方程(4)描述单个单元。所以对于每个内部单元 $$K_{11} = -L^{T}+R$$ $$K_{12} = -L^{T}+R$$ $$K_{21} = L+R$$ $$K_{22} = O^{+}-L^{T}+R$$ 对于边界$$K_{11} = O^{+}$$ 由方程(4)求解$\phi_d$$$\phi_d=K_{22}^{-1}(s_d - K_{21}\phi_c)$$ 然后带入方程(3)中，得$$[K_{11}-K_{12}K_{22}^{-1}K_{21}]\phi_c = s_c - K_{12}K_{22}^{-1}s_d$$ 迭代求解采用迭代方法求解 令$\phi_d = 0$，求解$K_{11}\phi_c = s_c$，得到$\phi_c$ 计算每个单元上的误差源 $s_d = s_d - K_{21}\phi_c$ 在每个单元上求解 $K_{22}\phi_d = s_d$，得到 $\phi_d$ 更新源项 $s_c =s_c - K_{12}\phi_d$ 求解方程 $K_{11}\phi_c = s_c$，得到新的 $\phi_c$ 感觉迭代 2 次应该就差不多了。 结果迭代求解失败，方程不满足局部守恒关系。迭代会震荡得更厉害。 SUPG （LS） + SGS想采用LS方法和SGS方法结合起来求解。因为最小二乘方法中为处理边界条件，公式中出现 $\frac{1}{σ}$，所以不适合于真空边界条件求解。所以单元矩阵在分真空边界上采用最小二乘方法，在真空区域采用SGS方法。 以下方法是我自己提出来的FSGS (快速SGS)最终要求解的代数方程组为$$K\phi = F$$其中 $F = Es$，所以$$K = A-BD^{-1}C = -L^{T}+R + O^{+} -(-L^{T}+R)D^{-1}(L+R)$$ $$K = -L^{T}+R+ O^{+} + L^{T}D^{-1}L + L^{T}D^{-1}R -RD^{-1}L - RD^{-1}R$$ $$E = I-(-L^{T}+R)D^{-1} = I+L^{T}D^{-1} - RD^{-1}$$ 非真空区域令 $D=R$，此时$$K = -L^{T}+R+ O^{+} + L^{T}R^{-1}L + L^{T} -L - R = O^{+} + L^{T}R^{-1}L -L$$ $$E = L^{T}R^{-1}$$ 真空区域令 $D = I$，此时 $$K = O^{+} + L^{T}L -L $$ $$E = L^{T}$$ OWLS (最优加权最小二乘)不带边界条件连续有限元离散之后的输运方程为$$(L+R)\phi = s$$ 在方程两端同时乘以 $(L+R)^{T}D$，$D$是一个权重矩阵，所以$$(L+R)^{T}D(L+R)\phi = (L+R)^{T}Ds$$ 所以$$K =L^{T}DL + L^{T}DR+R^{T}DL + R^{T}DR$$ $$E =L^{T}D+ R^{T}D$$ 非真空区域取$D = R^{-1}$，由于矩阵 $R$ 是对称的，所以$$K =L^{T}R^{-1}L + L^{T}+L + R$$ $$E =L^{T}R^{-1}+ I$$ 该方程减去一阶方程$(L+R)\phi = s$，得$$K =L^{T}R^{-1}L + L^{T}$$ $$E =L^{T}R^{-1}$$ 由于 $L^{T} = O-L$，所以$$K =L^{T}R^{-1}L + O-L$$ $$E =L^{T}R^{-1}$$ 带入边界条件后，该式与FSGS是完全一样的 真空区域取 $D = I$，则$$K = O^{+} + L^{T}L -L $$ $$E = L^{T}$$ 所以，最小二乘方法与FSGS是完全等价的。 为什么要减去一阶方程不带边界条件的最小二乘方法的弱形式为 $$(Tφ,Tϕ) = (Tφ,s)$$ 利用分部积分将检验函数上的导数都转移到求解量上，得$$&lt;φ,n⋅Ω(Ω⋅∇ϕ+σϕ-s)&gt;-(φ,Ω⋅∇(Ω⋅∇ϕ)-Ω⋅∇s-σ^{2}ϕ+σs) = 0 $$ 所以最小二乘泛函的Euler-Lagrange方程为$$\left\{\begin{matrix}Ω⋅∇(Ω⋅∇ϕ)-Ω⋅∇s-σ^{2}ϕ+σs=0,\phi \in V\\Ω⋅∇ϕ+σϕ-s,\phi \in Γ\end{matrix}\right.$$ 所以在一个非真空材料区域内满足SAAF方程，在材料边界满足一阶中子输运方程。如果直接对原来的最小二乘变分求解表示一阶方程在材料边界上严格满足，不存在离散误差，而这是不可能的，在材料交界面上一阶方程不能严格满足。所以原来的最小二乘变分必须减去一阶方程。这样做有很多好处，包括实现了最小二乘方程的全局守恒性，可以直接处理自然边界条件，可以计算内真空问题，解决了传统最小二乘方法的所有问题。]]></content>
      <categories>
        <category>输运方程</category>
      </categories>
      <tags>
        <tag>有限元</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[爱的艺术读后感.md]]></title>
    <url>%2F2017%2F11%2F05%2F%E7%88%B1%E7%9A%84%E8%89%BA%E6%9C%AF%E8%AF%BB%E5%90%8E%E6%84%9F-md%2F</url>
    <content type="text"><![CDATA[最近看了《爱的艺术》,有以下几点学习和感悟: 爱是一门艺术, 这门艺术是可以学习的, 就像学画画, 重要的是一种感觉, 这种感觉需要一种创造性的倾向, 需要一种欣赏的眼光, 重要的是需要不断练习. 爱的能力就像画画一样，如果一个人想画画，但是他不去学习绘画的技艺，而是不断强调要找到他愿意画的合适的对象，以为找到那个对象，他就能画出一幅完美的画。但这根本就是幻想，即使他找到了对象，也绝对画不出来。爱是一种能力问题而不是对象问题。 许多人认为爱情只是偶然产生的的令人心荡神怡的感受主要有以下几个原因, 大多数人认为爱情首先是自己能否被人爱，而不是自己有没有能力爱的问题，于是通过粉饰自己来赢得人心, 每个人都通过显示自己多漂亮, 多有钱, 多有权等来吸引别人。 人们认为爱的问题是一个对象问题，而不是能力问题，于是苦苦等待那个人。 不了解激情和爱情的区别. 人是孤独的，一个人如果不能以某种方式同他人或周围世界结合在一起，他就会疯狂。人类摆脱孤独使同他人或周围世界结合在一起有以下集中方式, 不同形式的纵欲，吸毒，酗酒，性 …在短暂的极度兴奋中，世界消失了，与世隔绝的感觉也随之而去。 通过与一组人的习惯、风格、看法保持一致来达到与他人的结合。亲人，团体，国家 …参与者为了使自己属于这一组人而失去了大部分个性， 创造性的劳动，人在创造的过程中与世界一致。这种统一不是人与人之间的统一 只有爱才能实现人与人之间的统一 在一个商业化占统治地位以及把物质成功看得高于一切的文化中，人与人之间的爱情关系也遵循同控制商品和劳动力市场一样的基本原则。爱情的产生往往是以衡量对方及本人的交换价值为前提。 在市场经济下,有用的物和有用的人的精力和技巧都变成价值,这些价值根据市场的条件自愿公平地进行交换.在这种情况下,人们以为所有有价值的东西都是商品,一切东西都可以用钱买到,甚至爱情也是以衡量双方的交换价值为基础。 我们当前的文化以购买欲和互利互换的观念为基础，当前的社会要求人尽可能多的生产和消费, 现代人的幸福就是欣赏橱窗，用现金或分期付款的方式购买他力所能及的东西。 获得爱的能力的主要条件是克服自恋. 自恋倾向会扭曲现实, 让人自欺欺人。爱是一项积极的活动,需要创造性的发挥自己的力量。需要把内心有生命力的东西分享给他人，同别人分享他的欢乐、兴趣、理解力、知识、幽默和悲伤，需要在丰富他人的生命感的同时丰富自己的生命感。]]></content>
      <categories>
        <category>哲学</category>
      </categories>
      <tags>
        <tag>弗洛姆</tag>
        <tag>爱的艺术</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[中子输运方程一维求解程序]]></title>
    <url>%2F2017%2F11%2F02%2F%E4%B8%80%E9%98%B6%E4%B8%AD%E5%AD%90%E8%BE%93%E8%BF%90%E6%96%B9%E7%A8%8B%E4%B8%80%E7%BB%B4%E6%B1%82%E8%A7%A3%E7%A8%8B%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[开发该程序主要用于测试各种算法，算法的稳定性，算法的效率，以及学习并行算法的实施。目前程序角度上采用球谐函数方法，空间上采用有限元方法。 单能一维中子输运方程$$μ\frac{∂\phi(z,μ)}{∂z}+ σ_t(z)ϕ(z,μ) = \frac{1}{2\pi}\int_{0}^{2\pi}\int_{-1}^{1}σ_s(z,\mu_0)\phi(z,\mu^{‘}))d\mu^{‘}d\varphi^{‘} + \frac{s(z)}{2}$$ 推导过程单能三维中子输运方程为$$Ω\cdot ∇ϕ(r,Ω) + σ_t(r)ϕ(r,Ω) = \int_{Ω’}\sigma_s(r,Ω’\cdot Ω)\phi(r,Ω’)dΩ’ + s(r,Ω)$$对于一维情况，根据对称性有$$\frac{∂\phi(r,Ω)}{∂x} = 0$$ $$\frac{∂\phi(r,Ω)}{∂y} = 0$$ $$\phi(r,Ω) = \frac{1}{2\pi}\phi(z,\mu)$$ $$s(r,Ω) = \frac{1}{4\pi}s(z)$$ 对三维的输运方程对 φ 在 $[0,2\pi]$ 积分，得$$μ\frac{∂\phi(z,μ)}{∂z}+ σ_t(z)ϕ(z,μ) =\int_{0}^{2\pi}\int_{Ω’}\sigma_s(r,Ω’\cdot Ω)\phi(r,Ω’)dΩ’d\varphi + \frac{s(z)}{2}$$ 定义$$σ_s(z,\mu_0) = \int_{0}^{2\pi}σ_s(z,Ω’\cdot Ω)d\varphi$$ 所以，一维中子输运方程为$$μ\frac{∂\phi(z,μ)}{∂z}+ σ_t(z)ϕ(z,μ) = \frac{1}{2\pi}\int_{0}^{2\pi}\int_{-1}^{1}σ_s(z,\mu_0)\phi(z,\mu^{‘}))d\mu^{‘}d\varphi^{‘} + \frac{s(z)}{2}$$ 边界条件该方程是一阶双曲方程，需要给定如流边界条件，即$$\phi(z,\mu) = g,n\cdot \mu &lt;0$$所以，真空边界条件为$$\phi(z,\mu) = 0,n\cdot \mu &lt;0$$反射边界条件为$$\phi(z,\mu) = \phi(z,-\mu),n\cdot \mu &lt;0$$ Pn方法用勒让得多项式展开角度变量将中子角通量密度和散射截面都用勒让得多项式展开，得 $$\phi(z.μ) = \sum_{n=0}^{∞}\frac{2n+1}{2}\phi_n(z)P_n(\mu)$$ $$σ_s(z,\mu_0) = \sum_{n=0}^{∞}\frac{2n+1}{2}\sigma_{sn}(z)P_n(\mu_0)$$ 由勒让得多项式加法定理及正交关系得散射源项为$$\frac{1}{2\pi}\int_{0}^{2\pi}\int_{-1}^{1}σ_s(z,\mu_0)\phi(z,\mu^{‘}))d\mu^{‘}d\varphi^{‘} = \sum_{n=0}^{∞}\frac{2n+1}{2}\sigma_{sn}(z)\phi_n(z)P_n(\mu)$$ 由勒让得多项式递推公式得 $$\sum_{n=0}^{∞}\frac{d\phi_n(z)}{dz}[(n+1)P_{n+1}(\mu)+n P_{n-1}(μ)]+ \sum_{n=0}^{∞}(2n+1)σ_t(z)\phi_n(z)P_n(\mu) = \sum_{n=0}^{∞}(2n+1)\sigma_{sn}(z)\phi_n(z)P_n(\mu) + s(z)$$ 在方程两端同时乘以$P_{n}(\mu),n=0,1,2,…$,并对 $-1\le \mu \le 1$积分，得 $$\frac{n+1}{2n+1}\frac{d\phi_{n+1}(z)}{dz}+\frac{1}{2n+1}\frac{d\phi_{n-1}(z)}{dz}+\sigma_{n}\phi_n(z) = s(z)δ_{0n}$$ 式中 $σ_n = σ_t - σ_{sn}$ 在实际计算中，只取方程组前 $N+1$个方程，即认为$\frac{d\phi_{n+1}}{dz} = 0$以及$\phi_{n} = 0,n&gt;N$，此时$$\phi(z.μ) = \sum_{n=0}^{N}\frac{2n+1}{2}\phi_n(z)P_n(\mu)$$ 将其写为矩阵形式为 $$\mathbf{A}\frac{d\vec{\phi}(z)}{dz}+\mathbf{\Sigma}\vec{\phi}(z) = \vec{s}$$ 其中$$\vec{\phi} = [\phi_0,\phi_1,\phi_2,…,\phi_N]^{T}$$$$\vec{s} = [s_0,s_1,s_2,…,s_N]^{T}$$$$\mathbf{\Sigma} = diag[\sigma_n]$$$$\mathbf{A} = \begin{bmatrix} 0 &amp; 1 &amp; 0 &amp;0 &amp;… \ \frac{1}{3}&amp;0 &amp;\frac{2}{3} &amp; 0 &amp; … \ 0&amp;\frac{2}{5} &amp;0&amp; \frac{3}{5} &amp; … \ …&amp;… &amp;…&amp;… &amp; …\end{bmatrix} $$ 此时矩阵 $\mathbf{A}$ 不对称 用正交归一勒让得多项式展开$$\phi(z.μ) = \sum_{n=0}^{∞}\phi_n^{‘}(z)P_n^{‘}(\mu)$$$$σ_s(z,\mu_0) = \sum_{n=0}^{∞}\sigma_{sn}^{‘}(z)P_n^{‘}(\mu_0)$$其中$$P_n^{‘}(\mu) = \sqrt{\frac{2n+1}{2}}P_n(\mu)$$$$\int_{-1}^{1}P_n^{‘}(\mu)P_m^{‘}(\mu)d\mu = δ_{nm}$$ 递推公式$$\mu P_n^{‘}(\mu) = \frac{n+1}{\sqrt{(2n+1)(2n+3)}}{P_{n+1}^{‘}(\mu)}+\frac{n}{\sqrt{(2n-1)(2n+1)}}{P_{n-1}^{‘}(\mu)}$$ 将其带入输运方程，并利用勒让得多项式递推公式和加法定理得$$\sum_{n=0}^{∞}\frac{d\phi_n^{‘}(z)}{dz}[\frac{n+1}{\sqrt{(2n+1)(2n+3)}}{P_{n+1}^{‘}(\mu)}+\frac{n}{\sqrt{(2n-1)(2n+1)}}{P_{n-1}^{‘}(\mu)}]+ \sum_{n=0}^{∞}σ_t(z)\phi_n^{‘}(z)P_n^{‘}(\mu) = \sum_{n=0}^{∞}\sigma_{sn}^{‘}(z)\phi_n^{‘}(z)P_n^{‘}(\mu) +\frac{s(z)}{2}$$ 在方程两端同时乘以$P_{n}^{‘}(\mu),n=0,1,2,…$,并对 $-1\le \mu \le 1$积分，得$$\mathbf{A}\frac{d\vec{\phi}(z)}{dz}+\mathbf{\Sigma}\vec{\phi}(z) = \vec{s}$$ 其中$$\vec{\phi} = [\phi_0,\phi_1,\phi_2,…,\phi_N]^{T}= \sqrt{2}[\phi_0^{‘},\phi_1^{‘},\phi_2^{‘},…,\phi_N^{‘}]^{T}$$$$\vec{s} = [s_0,s_1,s_2,…,s_N]^{T}$$$$\mathbf{\Sigma} = diag[\sigma_n]$$$$\mathbf{A} = \begin{bmatrix} 0 &amp; \frac{1}{\sqrt{3}} &amp; 0 &amp;0 &amp;… \ \frac{1}{\sqrt{3}}&amp;0 &amp;\frac{2}{\sqrt{15}} &amp; 0 &amp; … \ 0&amp;\frac{2}{\sqrt{15}} &amp;0&amp; \frac{3}{\sqrt{35}} &amp; … \ 0&amp;0&amp;\frac{3}{\sqrt{35}}&amp;0 &amp; … \ …&amp;…&amp;…&amp;… &amp; …\end{bmatrix} $$ 此时矩阵 $\mathbf{A}$ 是对称的，其中$$a_{i+1,i} = a_{i,i+1} = \frac{i}{\sqrt{4i^2-1}}$$其中0阶矩$\phi_0 = \sqrt{2}\phi_{0}^{‘} = \int_{-1}^{1}\phi(z,\mu)d\mu$ 表示标通量。外中子源是各向同性的，所以 $s_1,s_2,…,s_N$都为0。 有限元方法对以下一阶方程组使用有限元方法 将$\vec{\phi}(z)$中的每一个通量矩 $\phi_{j}(z)$用有限元基函数展开得$$\phi_{j}(z) = \sum_{i=1}^I\phi_{ji}N_{i}(z) = \vec{\phi}_{j}^{T}\vec{N}(z)$$ 将离散的未知量写成如下矩阵形式$$\mathbf{P} = \begin{bmatrix}\phi_{11}&amp; \phi_{12} &amp; … &amp; \phi_{1I}\\\phi_{21}&amp; \phi_{22} &amp; … &amp; \phi_{2I}\\⋮&amp;⋮ &amp; ⋱ &amp; ⋮\\\phi_{J1}&amp; \phi_{J2} &amp; … &amp; \phi_{JI}\end{bmatrix}$$ 所以$$\vec{\phi}(z) = \mathbf{P}\vec{N}(z)$$ 所以$$\mathbf{A}\mathbf{P}\frac{d\vec{N}(z)}{dz}+\mathbf{\Sigma}\mathbf{P}\vec{N}(z) = \vec{s}$$ galerkin方法在方程两端同时右乘以基函数$[\vec{N}]^{T}(z)$，并对单元区域进行积分，得$$\mathbf{A}\mathbf{P}_e\int_{e}\frac{\partial \vec{N}(z)}{\partial z}\vec{N}^{T}(z)dz + \int_{e}\mathbf{Σ}_e\mathbf{P}_e\vec{N}(z)\vec{N}^{T}(z)dz = \int_{e}\vec{s}_e\vec{N}^{T}(z)dz$$ 利用分部积分，得$$n\cdot \mathbf{A}\mathbf{P}_{\Gamma_n}-\mathbf{A}\mathbf{P}_e\int_{e}\vec{N}(z)\frac{\partial \vec{N}^{T}(z)}{\partial z}dz + \int_{e}\mathbf{Σ}_e\mathbf{P}_e\vec{N}(z)\vec{N}^{T}(z)dz = \int_{e}\vec{s}_e\vec{N}^{T}(z)dz$$ 边界条件令$\mathbf{A}_n = n\cdot \mathbf{A}$，将其进行特征值分解得$\mathbf{A}_n = \mathbf{A}_n^{+}+\mathbf{A}_n^{-}$ 真空边界$$\mathbf{A}_n^{-} \vec{\phi}_{\Gamma_{v}} = 0$$ 反射边界$$\mathbf{A}_n^{-} \vec{\phi}_{\Gamma_{r}} = \mathbf{A}_n^{-} \mathbf{R}\vec{\phi}_{\Gamma_{r}}$$其中矩阵 $\mathbf{R} = \int_{-1}^{1} \vec{P}_n(\mu)\vec{P}_n(-\mu)d\mu$，该矩阵是一个对角矩阵$$\mathbf{R} = diag[1,-1,1,-1,…,(-1)^{n}]$$ 向量化将以上矩阵方程变为向量方程为 $$-\mathbf{B}_{1z}^{T}⊗\mathbf{A}\vec{\phi} + \mathbf{B}_{11}⊗\mathbf{Σ}\vec{\phi}+\mathbf{A}_n^{+}\vec{\phi}_{Γ}+\mathbf{A}_n^{-} \mathbf{R}\vec{\phi}_{\Gamma_{r}} = \vec{b} ⊗\vec{s}$$ 其中$$\mathbf{B}_{1z} = \int_{e}\vec{N}(z)\frac{\partial \vec{N}^{T}(z)}{\partial z}dz$$$$\mathbf{B}_{11} = \int_{e}\vec{N}(z)\vec{N}(z)^{T}dz$$$$\vec{b} = \int_{e}\vec{N}(z)dz$$ 一维线性单元形状函数及其导数$$\vec{N}(z) = [λ_1,λ_2]^{T}$$$$\frac{\partial \vec{N}(z)}{\partial z} = \frac{[b_1,b_2]^{T}}{l}$$ 其中$$b_1 = -1,b_2 = 1$$ 由欧拉公式 $$\int_{z}λ_1^aλ_2^bdz=\frac{a!b!}{(a+b+1)!}l$$ 得$$\int_{z}dz=l$$$$\int_{z}λ_idz=\frac{l}{2}$$$$\int_{z}λ_i^{2}dz=\frac{l}{3}$$$$\int_{z}λ_iλ_jdz=\frac{l}{6}$$ 所以$$\mathbf{B}_{1z} = \int_{e}\vec{N}(z)\frac{\partial \vec{N}^{T}(z)}{\partial z}dz = \frac{1}{2}\begin{bmatrix}-1&amp;1\\-1&amp;1\end{bmatrix}$$ $$\mathbf{B}_{11} = \int_{e}\vec{N}(z)\vec{N}(z)^{T}dz = \frac{l}{6}\begin{bmatrix}2&amp;1\\1&amp;2\end{bmatrix}$$ $$\vec{b} = \int_{e}\vec{N}(z)dz = \frac{l}{2}\begin{bmatrix}1\\1\end{bmatrix}$$ 方程组装单元矩阵内部$$\mathbf{K}_e = -\mathbf{B}_{1z}^{T}⊗\mathbf{A} + \mathbf{B}_{11}⊗\mathbf{Σ}$$ 边界$$\mathbf{K}_{be} = \mathbf{A}_n^{+}+\mathbf{A}_n^{-} \mathbf{R}$$ RHS$$\vec{f}_e = \vec{b} ⊗\vec{s}$$ 附录勒让得多项式定义式$$P_n(\mu) = \frac{1}{2^{n}n!}\frac{d^{n}(\mu^2-1)^{n}}{d\mu^{n}}$$ 正交关系式$$\int_{-1}^{1}P_n(\mu)P_m(\mu)d\mu = \frac{2}{2n+1}δ_{nm}$$ 递推关系式$$\mu P_n(\mu) = \frac{1}{2n+1}[nP_{n-1}(\mu) + (n+1)P_{n+1}(\mu)]$$ 加法定理$$P_n(\mu_0) = P_n(\mu)P_n(\mu^{‘}) + 2\sum_{m=1}^{n}\frac{(n-m)!}{(n+m)!}P_{n}^{m}(\mu)cos(m(φ-\varphi^{‘}))$$ 多项式系数 1 $x$ $x^2$ $x^3$ $x^4$ $x^5$ $x^6$ $x^7$ 1 1 2 0 1 3 $-\frac{1}{2}$ $\frac{3}{2}$ 4 $-\frac{3}{2}$ $\frac{5}{2}$ 5 $\frac{3}{8}$ $-\frac{30}{8}$ $\frac{35}{8}$ 6 $\frac{15}{8}$ $-\frac{70}{8}$ $\frac{63}{8}$ 7 $-\frac{5}{16}$ $\frac{105}{16}$ $-\frac{315}{16}$ $\frac{231}{16}$ 8 $-\frac{35}{16}$ $\frac{315}{16}$ $-\frac{693}{16}$ $\frac{429}{16}$ 图像 向量化向量化算子定义向量化算子，按列重排$V_c$，按行重排 $V_r$$V_c(\mathbf{P}) = \begin{bmatrix}\phi_{11}\ \phi_{21}\\⋮\ \phi_{J1}\ \phi_{12} \ ⋮\\\phi_{J2} \ ⋮\\\phi_{1I} \ ⋮\\\phi_{JI}\end{bmatrix}$ $V_r(\mathbf{P}) = \begin{bmatrix}\phi_{11}\ \phi_{12}\\⋮\ \phi_{1I}\ \phi_{21} \ ⋮\\\phi_{2I} \ ⋮\\\phi_{J1} \ ⋮\ \phi_{JI}\end{bmatrix}$ 矩阵方程向量化$\mathbf{A}\mathbf{X}\mathbf{B} = \mathbf{Y} \Leftrightarrow (\mathbf{A} ⊗ \mathbf{B}^{T})V_r(\mathbf{X}) = V_r(\mathbf{Y})\Leftrightarrow (\mathbf{B}^{T}⊗\mathbf{A} )V_c(\mathbf{X}) = V_c(\mathbf{Y})$]]></content>
      <categories>
        <category>中子输运方程</category>
      </categories>
      <tags>
        <tag>中子输运方程</tag>
        <tag>Pn方法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[勒让得多项式]]></title>
    <url>%2F2017%2F10%2F31%2F%E5%8B%92%E8%AE%A9%E5%BE%97%E5%A4%9A%E9%A1%B9%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[勒让得多项式是一组正交的多项式，主要有以下性质 勒让得多项式定义式$P_n(\mu) = \frac{1}{2^{n}n!}\frac{d^{n}(\mu^2-1)^{n}}{d\mu^{n}}$ 正交关系式$\int_{-1}^{1}P_n(\mu)P_m(\mu)d\mu = \frac{2}{2n+1}δ_{nm}$ 递推关系式$\mu P_n(\mu) = \frac{1}{2n+1}[nP_{n-1}(\mu) + (n+1)P_{n+1}(\mu)]$ 加法定理$P_n(\mu_0) = P_n(\mu)P_n(\mu^{‘}) + 2\sum_{m=1}^{n}\frac{(n-m)!}{(n+m)!}P_{n}^{m}(\mu)cos(m(φ-\varphi^{‘}))$ 多项式系数 1 $x$ $x^2$ $x^3$ $x^4$ $x^5$ $x^6$ $x^7$ 1 1 2 0 1 3 $-\frac{1}{2}$ $\frac{3}{2}$ 4 $-\frac{3}{2}$ $\frac{5}{2}$ 5 $\frac{3}{8}$ $-\frac{30}{8}$ $\frac{35}{8}$ 6 $\frac{15}{8}$ $-\frac{70}{8}$ $\frac{63}{8}$ 7 $-\frac{5}{16}$ $\frac{105}{16}$ $-\frac{315}{16}$ $\frac{231}{16}$ 8 $-\frac{35}{16}$ $\frac{315}{16}$ $-\frac{693}{16}$ $\frac{429}{16}$ 图像]]></content>
      <categories>
        <category>数值计算</category>
      </categories>
      <tags>
        <tag>pn方法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[psblas学习]]></title>
    <url>%2F2017%2F10%2F26%2Fpsblas%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[PSBLAS(parallel sparse BLAS) 主要用于并行迭代求解大型稀疏线性代数方程组。 该程序用Fortran2003按照面向对象思想编写。 安装下载1git clone https://github.com/sfilippone/psblas3.git 安装按照说明进行安装，基本上就是以下命令1234./configuremakemake installmake clean 要预先安装blas，lapack，metis等库。 测试使用FoBis编译测试文件，定义变量 $PSB_DIR，然后修改以下的变量就可以使用psblas的所有库了。1234567$PSB_DIR = xxxmpi = Trueinclude = $PSB_DIR/modules $PSB_DIR/includelibs = -L$PSB_DIR/libext_libs = blas lapack metis psb_util psb_krylov psb_prec psb_base 概念点的分类 内部点(inner points)只依赖于同一区域的点； 边界点(boundary points)依赖于其它区域的点； 光晕点(halo points)(ghost points)一个区域的光晕点是该区域的边界点所依赖的其他区域的点；一个区域的边界点通常是其它区域的光晕点。 对于一个区域形成的矩阵，行数为 $I+B$ 行，列数为 $I+B+H$ 列，其中 $I$ 为内部点数目， $B$为边界点数目，$H$ 为光晕点数目。 索引空间(index_space)建立索引空间是计算的第一步，将索引分配到不同的进程，建立全局与局部的对应关系。 全局索引(global indices) 全局行 全局列 局部索引(local indices) 局部行 局部光晕点 -&gt; 局部列 局部全局对照表 不同的离散方法有不同的索引空间，要确定索引空间必须确定网格的稀疏模式。 内置的稀疏矩阵存储格式123- coo 坐标存储(ia(nnz),ja(nnz),a(nnz))- csr 压缩行存储(ia(nr+1),ja(nnz),a(nnz))- csc 压缩列存储 矩阵的状态123- build 分配空间之后，组装之前- assembled 组装后，之后可以进行矩阵计算。- update 对相同稀疏模式矩阵值进行更新 命名原则 所有的subroutine 和data types 以psb_ 开头 所有自定义的类以 _type 结尾 自定义的数据精度 s 单精度实数 d 双精度实数 c 单精度复数 z 双精度复数 所有常数用 _ 结尾 所有用户API 命名方式为 psb_xxname xx主要有 ge: 密集数据 sp: 稀疏数据 cd: 数据交换描述符 name主要有 init -&gt; initialize all -&gt; allocate ins -&gt; insert asb -&gt; assemble prec -&gt; precondition bld -&gt; build 主要API空间分配API 通信描述符分配psb_cdall 123456789101112131415call psb_cdall(ictxt,desc_a,info,mg=mg,parts=parts)call psb_cdall(ictxt,desc_a,info,vg=vg,[mg=mg,flag=flag])call psb_cdall(ictxt,desc_a,info,vl=vl,[nl=nl,globalcheck=.true.,lidx=lidx])call psb_cdall(ictxt,desc_a,info,nl=nl)call psb_cdall(ictxt,desc_a,info,mg=mg,repl=.true.)integer(psb_ipk_) :: ictxt ! communication contexttype(psb_desc_type) :: desc_a ! communication descriptorinteger(psb_ipk_) :: info ! Error codeinteger(psb_ipk_) :: mg ! the (global) number of rows of the problemexternal :: parts ! the partitioning subroutineinteger(psb_ipk_) :: vg(mg) ! each index(i) is allocated to process vg(i)integer(psb_ipk_) :: nl ! number of local indicesinteger(psb_ipk_) :: vl(nl) ! global indices of current processlogical :: repl ! build a replicated index space cd (communication descriptor)存储进程之间的通信信息。通信描述符分配将离散的点分配到不同的核，第一次调用后进入build state，此时可以在不同的进程中添加通信。通过psb_cdins或psb_spins添加边，即定义整个离散的模式或稀疏矩阵的稀疏模式。然后通过psb_cdasb或psb_spasb计算通信信息，即定义halo points等，进入assembled state。此时就可以进行并行的矩阵计算，内部通信会自动进行。 稀疏矩阵分配psb_spall 12345call psb_spall(a, desc_a, info, nnz)type(psb_dspmat_type) :: a ! sparse matrixtype(psb_desc_type) :: desc_a ! communication descriptorinteger(psb_ipk_) :: info ! Error codeinteger(psb_ipk_) :: nnz ! An estimate of the number of nonzeroes of local 密集矩阵或向量分配psb_geall 123456call psb_geall(x, desc_a, info, n, lb)type(psb_d_vect_type) :: x ! dense vector or matrixtype(psb_desc_type) :: desc_a ! communication descriptorinteger(psb_ipk_) :: info ! Error codeinteger(psb_ipk_) :: n ! The number of columns (matrix)integer(psb_ipk_) :: lb ! The lower bound for the column index (matrix) 赋值API 通信描述符赋值 12call psb_cdins(nz, ia, ja, desc_a, info [,ila,jla])call psb_cdins(nz,ja,desc,info[,jla,mask,lidx]) 稀疏矩阵赋值 12345678call psb_spins(nz, ia, ja, val, a, desc_a, info [,local])integer(psb_ipk_) :: nzinteger(psb_ipk_) :: ia(nz)integer(psb_ipk_) :: ja(nz)integer(psb_dpk_) :: val(nz)type(psb_dspmat_type) :: a ! sparse matrixtype(psb_desc_type) :: desc_a ! communication descriptorinteger(psb_ipk_) :: info ! Error code 密集矩阵或向量赋值 1234call psb_geins(m, irw, val, x, desc_a, info [,dupl,local])type(psb_d_vect_type) :: x ! dense vector or matrixtype(psb_desc_type) :: desc_a ! communication descriptorinteger(psb_ipk_) :: info ! Error code 赋值API定义整个稀疏矩阵的稀疏模式以及稀疏矩阵的值， 组装API 通信描述符组装 1call psb_cdasb(desc_a, info) 稀疏矩阵组装 1234call psb_spasb(a, desc_a, info, afmt, upd, dupl, mold)type(psb_dspmat_type) :: a ! sparse matrixtype(psb_desc_type) :: desc_a ! communication descriptorinteger(psb_ipk_) :: info ! Error code 密集矩阵或向量组装 1call psb_geasb(x, desc_a, info, mold) 组装完成之后，整个cd定义完成，即定义好给个区域的halo points，定义好了每个进程的发送和接收的信息，进入assembled状态，之后就可以进行并行的矩阵计算以及方程求解，不用担心内部的通信问题。 并行环境API123456- psb_init 并行环境初始化- psb_info 返回并行环境信息- psb_exit 退出并行环境- psb_abort 中断计算- psb_barrier 暂时中断- psb_wtime 返回时间 数据管理API计算API计算流程12345678- 并行环境初始化 psb_init- 索引空间初始化 psb_cdall- 稀疏矩阵初始化 psb_spall- 矩阵向量初始化 psb_geall- 各进程系数计算 psb_spins, psb_geins- 矩阵组装 psb_cdasb, psb_spasb, psb_geasb- 预处理 psb_precset, psb_precbld- 迭代求解 psb_krylov]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>psblas</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数值方法简介]]></title>
    <url>%2F2017%2F10%2F25%2F%E6%95%B0%E5%80%BC%E6%96%B9%E6%B3%95%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[数值计算方法是将连续的偏微分方程及其边值条件通过一些数值方法将其离散为一个代数方程组，然后利用计算机进行数值求解。常用的数值方法有有限差分法，有限体积法，有限元法等。有限差分法通过用差商代替微分，将偏微分方程离散为代数方程，这种方法简单有效，容易推导，但通常只针对结构网格。 有限体积法根据守恒定理将方程的积分形式在每一个控制体中列出一个守恒方程，这样可以保证物理量的局部守恒，而且可以适用于任意网格。 有限元方法利用变分原理或加权残值法将偏微分方程变为一种积分形式，这种形式被称为弱形式，然后利用分片多项式对未知量进行插值，带入弱形式中进行求解。有限元方法非常通用和灵活，很容易处理任意边界条件，同时适用于任意网格。 差分迎风差分格式$$\frac{\partial \phi}{\partial x} = \frac{\phi_i - \phi_{i-1}}{Δx}$$ 表示点$i$只与点$i-1$相关 矩阵形式$$[\frac{\partial \phi}{\partial x}Δx] = \begin{bmatrix} 1 &amp; 0 &amp; 0 &amp;…&amp;0 \ -1&amp;1 &amp; 0 &amp; …&amp;0 \ 0&amp;-1 &amp;1 &amp; …&amp;0 \ \vdots&amp;\vdots &amp;\vdots&amp;\ddots &amp; \vdots \ 0&amp;0 &amp;0&amp;-1 &amp; 1\end{bmatrix}\begin{bmatrix} \phi_1 \ \phi_2 \ \phi_3 \ \vdots \ \phi_n \end{bmatrix}$$ 矩阵中第一行和最后一行应该由边界条件决定,该矩阵是一个下三角矩阵. 中心差分格式$$\frac{\partial \phi}{\partial x} = \frac{\phi_{i+1} - \phi_{i-1}}{2Δx}$$表示点$i$与点$i-1$和点$i+1$相关 矩阵形式$$[\frac{\partial \phi}{\partial x}Δx] = \frac{1}{2}\begin{bmatrix} 0 &amp; 1 &amp; 0&amp; 0 &amp;…&amp;0 \ -1&amp;0 &amp; 1 &amp; 0&amp;…&amp;0 \ 0&amp;-1 &amp;0 &amp; 1 &amp;…&amp;0 \ \vdots&amp;\vdots &amp;\vdots&amp;\vdots&amp; \ddots&amp; \vdots \ 0&amp;0&amp;0&amp;-1&amp;0 &amp; 1 \ 0&amp;0 &amp;0&amp;0&amp;-1 &amp; 0 \end{bmatrix} \begin{bmatrix} \phi_1 \ \phi_2 \ \phi_3 \ \vdots \ \phi_{n-1} \ \phi_n \end{bmatrix}$$ 矩阵中第一行和最后一行应该由边界条件决定,该矩阵是一个反对称矩阵. 对对流占优方程使用迎风差分格式会产生拖尾效应 (smearing)，使用中心差分格式会产生伪震荡现象(wiggles) 有限元有限元方法在方程两端同时乘以基函数,然后再进行积分,导数项的单元矩阵可以表示为$$\mathbf{B}_{1x} = \int_{e}\vec{N}(x)\frac{\partial \vec{N}^{T}(x)}{\partial x}dx$$ 如果采用线性单元,此时$$\vec{N}(z) = [λ_1,λ_2]^{T}$$ $$\frac{\partial \vec{N}(z)}{\partial z} = \frac{[-1,1]^{T}}{l}$$ $$\int_{x}dx=l$$ $$\int_{x}λ_idx=\frac{l}{2}$$ $$\int_{x}λ_i^{2}dx=\frac{l}{3}$$ $$\int_{x}λ_iλ_jdx=\frac{l}{6},(i\ne j)$$ 所以$$\mathbf{B}_{1x} =\frac{1}{2}\begin{bmatrix}-1&amp;1\\-1&amp;1\end{bmatrix}$$ 将矩阵进行组装之后,得$$(\varphi,\frac{\partial \phi}{\partial x}) = \frac{1}{2}\begin{bmatrix} -1 &amp; 1 &amp; 0&amp; 0 &amp;…&amp;0 \ -1&amp;0 &amp; 1 &amp; 0&amp;…&amp;0 \ 0&amp;-1 &amp;0 &amp; 1 &amp;…&amp;0 \ \vdots&amp;\vdots &amp;\vdots&amp;\vdots&amp; \ddots&amp; \vdots \ 0&amp;0&amp;0&amp;-1&amp;0 &amp; 1 \ 0&amp;0 &amp;0&amp;0&amp;-1 &amp; 1 \end{bmatrix} \begin{bmatrix} \phi_1 \ \phi_2 \ \phi_3 \ \vdots \ \phi_{n-1} \ \phi_n \end{bmatrix}$$ 矩阵中第一行和最后一行应该由边界条件决定,除此之外,该矩阵与中心差分是完全一样的,该矩阵是一个反对称矩阵.所以有限元方法是与中心差分类似的方法. 不能直接用于求解双曲方程. 迎风格式探索格式1$$\mathbf{B}_{1x} =\begin{bmatrix}0&amp;0\\-1&amp;1\end{bmatrix}$$那么$$(\varphi,\frac{\partial \phi}{\partial x}) = \begin{bmatrix} 0 &amp; 0 &amp; 0 &amp;…&amp;0 \ -1&amp;1 &amp; 0 &amp; …&amp;0 \ 0&amp;-1 &amp;1 &amp; …&amp;0 \ \vdots&amp;\vdots &amp;\vdots&amp;\ddots &amp; \vdots \ 0&amp;0 &amp;0&amp;-1 &amp; 1\end{bmatrix}\begin{bmatrix} \phi_1 \ \phi_2 \ \phi_3 \ \vdots \ \phi_n \end{bmatrix}$$ 格式2$$\mathbf{B}_{1x} =\begin{bmatrix}1&amp;0\\-1&amp;0\end{bmatrix}$$那么$$(\varphi,\frac{\partial \phi}{\partial x}) = \begin{bmatrix} 1 &amp; 0 &amp; 0 &amp;…&amp;0 \ -1&amp;1 &amp; 0 &amp; …&amp;0 \ 0&amp;-1 &amp;1 &amp; …&amp;0 \ \vdots&amp;\vdots &amp;\vdots&amp;\ddots &amp; \vdots \ 0&amp;0 &amp;0&amp;-1 &amp; 0\end{bmatrix}\begin{bmatrix} \phi_1 \ \phi_2 \ \phi_3 \ \vdots \ \phi_n \end{bmatrix}$$ 格式3$$\mathbf{B}_{1x} =\frac{1}{2}\begin{bmatrix}1&amp;0\\-2&amp;1\end{bmatrix}$$那么$$(\varphi,\frac{\partial \phi}{\partial x}) = \begin{bmatrix} 1/2 &amp; 0 &amp; 0 &amp;…&amp;0 \ -1&amp;1 &amp; 0 &amp; …&amp;0 \ 0&amp;-1 &amp;1 &amp; …&amp;0 \ \vdots&amp;\vdots &amp;\vdots&amp;\ddots &amp; \vdots \ 0&amp;0 &amp;0&amp;-1 &amp; 1/2\end{bmatrix}\begin{bmatrix} \phi_1 \ \phi_2 \ \phi_3 \ \vdots \ \phi_n \end{bmatrix}$$ 数值方法的性质数值方法应该满足以下几点性质 一致性，随着网格尺寸的减小，截断误差应该趋近于0 稳定性 收敛性 物理量守恒 物理边界]]></content>
      <categories>
        <category>数值计算</category>
      </categories>
      <tags>
        <tag>有限元</tag>
        <tag>数值计算</tag>
        <tag>迎风格式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[偏微分方程简介]]></title>
    <url>%2F2017%2F10%2F25%2F%E5%81%8F%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[偏微分方程分类偏微分方程主要分为 双曲方程 椭圆方程 抛物方程 每一种方程都对应不同的物理过程，每一种方程所需要的初始/边界条件数目不同，每一种方程的数值求解方法不同。 双曲方程描述信息以一定速度沿某个方向传播，解是很多简单波的叠加。 椭圆方程描述信息以一定速度沿所有方向传播，只存在于稳态，非稳态不可能是椭圆方程。 抛物方程描述信息沿下游传播，可以逐步求解。通常描述瞬态问题。 一阶方程$$a_0+a_1\frac{∂{u}}{∂{x_1}} + …+a_d\frac{∂{u}}{∂{x_{d}}} = 0 $$一阶方程一定是双曲型方程。 二阶方程$$\sum_{i,j=1}^{D}a_{ij}\frac{∂^{2}u}{∂x_i∂x_j}+\sum_{k}^{D}b_k\frac{∂u}{∂x_k}+cu+d = 0$$ 系数矩阵$A = \{a_{ij}\} \in R^{D × D}$，该矩阵是对称的方程的性质由该矩阵的特征值决定，如果$D$个特征值全为正，则该方程为椭圆方程；如果$D-1$个特征值为正，另$1$个特征值为负，则该方程为双曲方程；如果$D-1$个特征值为正，另$1$个特征值为$0$，则该方程为抛物方程； 偏微分方程的几何解释 图中，domain of dependence是会对点P处的信息产生影响的区域，zone of influence是点P会影响的区域。 在有限元方法中，某一点的影响点集包含围绕着这一点的所有点，这对椭圆方程是适用的；对双曲方程并不适用，因为在双曲方程中，对某一点的影响点集应该只是上游区域的点，不应该包含下游区域的点。]]></content>
      <categories>
        <category>偏微分方程</category>
      </categories>
      <tags>
        <tag>PDE</tag>
        <tag>偏微分方程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一阶中子输运方程SGS离散]]></title>
    <url>%2F2017%2F10%2F23%2F%E4%B8%80%E9%98%B6%E4%B8%AD%E5%AD%90%E8%BE%93%E8%BF%90%E6%96%B9%E7%A8%8BSGS%E7%A6%BB%E6%95%A3%2F</url>
    <content type="text"><![CDATA[SGS(Sub-Grid Scale)方法是将间断有限元与连续有限元结合起来的一种方法，在不增加变量的情况下能够保证方程的稳定性。 输运方程$$Ω⋅∇ϕ+σϕ = s$$ 假设将通量分为连续部分与间断部分之和，其中$ ϕ_c$为连续部分，$ϕ_d$为间断部分$$ϕ = ϕ_c+ϕ_d$$ 弱形式在方程两端同时乘以基函数，在进行积分$$(φ_c,Ω⋅∇ϕ)+(φ_c,σϕ) = (φ_c,s)\tag{$1$}$$$$(φ_d,Ω⋅∇ϕ)+(φ_d,σϕ) = (φ_d,s)\tag{$2$}$$ 分部积分对方程1的$ϕ$分部积分$$&lt;φ_c,Ω⋅nϕ&gt; - (Ω⋅∇φ_c,ϕ)+(φ_c,σϕ) = (φ_c,s)$$ 对方程2的$ϕ_d$分部积分$$&lt;φ_d,Ω⋅nϕ_d&gt; - (Ω⋅∇φ_d,ϕ_d)+(φ_d,Ω⋅∇ϕ_c)+(φ_d,σϕ) = (φ_d,s)$$ 边界条件外边界$$&lt;φ,Ω⋅nϕ_c&gt;^{-} = G$$ $$&lt;φ,Ω⋅nϕ_d&gt; = 0$$ 内边界$$&lt;φ_d,Ω⋅nϕ_d&gt;^{-} = 0$$ 带入方程$$&lt;φ_c,Ω⋅nϕ_c&gt;^{+} - (Ω⋅∇φ_c,ϕ)+(φ_c,σϕ) = (φ_c,s) - G$$ $$&lt;φ_d,Ω⋅nϕ_d&gt;^{+} - (Ω⋅∇φ_d,ϕ_d)+(φ_d,Ω⋅∇ϕ_c)+(φ_d,σϕ) = (φ_d,s)$$ 矩阵形式离散之后，可以将以上方程写为矩阵形式$$\begin{bmatrix} A &amp; B\\C &amp; D\\\end{bmatrix} \begin{bmatrix} \phi_c \ \phi_d\end{bmatrix} = \begin{bmatrix} s_c \ s_d\end{bmatrix}$$ 由方程2得$$\phi_d=D^{-1}(s_d - C\phi_c)$$将其带入方程1中，得$$[A-BD^{-1}C ]\phi_c= s_c-BD^{-1}s_d$$ 其中矩阵的单元矩阵形式为： 内部$$A_e = - (Ω⋅∇φ_c,φ_c)+(φ_c,σφ_c)$$ $$B_e = - (Ω⋅∇φ_c,φ_d)+(φ_c,σφ_d)$$ $$C_e = (φ_d,Ω⋅∇φ_c)+(φ_d,σφ_c)$$ $$D_e = - (Ω⋅∇φ_d,φ_d)+(φ_d,σφ_d) + &lt;φ_d,Ω⋅nφ_d&gt;^{+} $$ 边界$$A_e = &lt;φ_c,Ω⋅nφ_c&gt;^{+}$$ 单元矩阵定义$$L = (φ,Ω⋅∇φ)$$ $$R = (φ,σφ)$$ $$O = &lt;φ,Ω⋅nφ&gt;$$ $$O^{+} = &lt;φ,Ω⋅nφ&gt;^{+}$$ $$O^{-} = &lt;φ,Ω⋅nφ&gt;^{-}$$ 所以$$L+L^{T} = O$$ $$A = -L^{T}+R$$ $$B = A$$ $$C = L+R = A + O$$ $$D = A + O^{+}$$ 矩阵运算 ？定义单元矩阵$$K_e = A-BD^{-1}C$$ $$K_e = A-A(A+O^{+})^{-1}(A+O) = A-A(A+O^{+})^{-1}(A+O^{+}+O^{-}) = -A(A+O^{+})^{-1}O^{-}$$ $$-A(A+O^{+})^{-1}O^{-} \phi= s-A(A + O^{+})^{-1}s$$ $$-O^{-} \phi= (A + O^{+})A^{-1}s-s = O^{+}A^{-1}s$$ $$A(O^{+})^{-1}(-O^{-})\phi = s$$ $$A (I- (O^{+})^{-1}O)\phi = s$$ 矩阵 $D$ 的性质 ?对于一维$$O = \begin{bmatrix} -As &amp; 0\\0 &amp; As\\\end{bmatrix}$$ $$O^{+} = \begin{bmatrix} -Asi &amp; 0\\0 &amp; Aso\\\end{bmatrix}$$ $$O^{-} = \begin{bmatrix} -Aso &amp; 0\\0 &amp; Asi\\\end{bmatrix}$$ $$L =\frac{1}{2} As\begin{bmatrix} -1 &amp; 1\-1 &amp; 1\\\end{bmatrix}$$ $$L+L^{T} =O$$ $$L-L^{T} =\begin{bmatrix} 0 &amp; As\ -As &amp; 0\\\end{bmatrix}$$ $$O^{+}-L^{T} = \frac{1}{2}\begin{bmatrix} Aso-Asi &amp; As\-As &amp; Aso-Asi\\\end{bmatrix}$$ $$L-O^{-} = O^{+} - L^{T}$$ FSGS最终要求解的代数方程组为$$K\phi = F$$其中 $F = Es$，所以$$K = A-BD^{-1}C = -L^{T}+R + O^{+} -(-L^{T}+R)D^{-1}(L+R)$$ $$K = -L^{T}+R+ O^{+} + L^{T}D^{-1}L + L^{T}D^{-1}R -RD^{-1}L - RD^{-1}R$$ $$E = I-(-L^{T}+R)D^{-1} = I+L^{T}D^{-1} - RD^{-1}$$ 对于非真空区域，令 $D=R$，此时$$K = -L^{T}+R+ O^{+} + L^{T}R^{-1}L + L^{T} -L - R = O^{+} + L^{T}R^{-1}L -L$$ $$E = L^{T}R^{-1}$$ 对于真空区域，令 $D = I$，此时 $$K = O^{+} + L^{T}L -L $$ $$E = L^{T}$$]]></content>
      <categories>
        <category>中子输运方程</category>
      </categories>
      <tags>
        <tag>SGS</tag>
        <tag>中子输运方程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[马斯洛人本哲学]]></title>
    <url>%2F2017%2F10%2F21%2F%E9%A9%AC%E6%96%AF%E6%B4%9B%E4%BA%BA%E6%9C%AC%E5%93%B2%E5%AD%A6%2F</url>
    <content type="text"><![CDATA[最近看了马斯洛的人本哲学，有以下几点学习和感悟： 人类永远不会感到一种持久的满足感，需求驱动着人们向前发展，当一个需求逐渐被满足，很快又会出现其他更高级的需求。 需求是有一定的层次关系的，只有满足了某些需求另一些才会出现，通常需求的层次关系为 生理 (食物) 安全 (人身安全，工作，住房等) 爱 (归属，朋友，爱人等) 尊重 (自我的高度评价，自尊以及受到他人尊重) 自我实现 (成为你所能成为的那个人) 需求控制着我们的思想，基本需求会调动着我们身体的所有机能为其服务。 需求就像维生素一样，如果得不到满足便会生病。 高级的需求反应了人的自由，这种高级需求同时意味着责任，但很多人往往会逃避责任，逃避自由；如果没有高级需求，人就会活得像行尸走肉。 需求是和价值联系起来的，只有满足了某种需求才会产生价值。 不仅人有需求，任何事物都有需求，这种需求可以看作所有事物发展的动力。 约拿情节，人们不仅惧怕自己身上最坏的东西，同时也害怕自己身上最好的东西。我们不仅压制着自己危险的，可怕的，可憎的冲动，也常常压制着美好的崇高的冲动。 判断一件事情是好是坏应该主要看做这件事的动机而不是结果。所以做一件事时，如果动机是好的，就勇敢的去做而不要去在意结果。]]></content>
      <categories>
        <category>哲学</category>
      </categories>
      <tags>
        <tag>马斯洛</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[中子输运方程的边界条件]]></title>
    <url>%2F2017%2F10%2F20%2F%E4%B8%AD%E5%AD%90%E8%BE%93%E8%BF%90%E6%96%B9%E7%A8%8B%E7%9A%84%E8%BE%B9%E7%95%8C%E6%9D%A1%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[中子输运方程是一个双曲方程，在数值计算中只需要给定入流边界条件就可以了，通常情况中子输运方程的边界条件包括真空边界条件，即入流恒为零;另一种边界条件为反射边界条件，即如流量等于其关于切线的对称角的出流量。在处理有限元方法的边界条件时，通常是将边界条件直接带入变分之后的边界积分项，然后对带边界条件的变分方程进行离散。以下对球谐函数方法的这两种边界条件进行处理。 真空边界条件$\phi(r,Ω) =0 \,\,\,\,\,\,\,\,\,\,\,\, r \in \Gamma_{v},n\cdot \Omega &lt;0$ 其中$\Gamma_{v}$为真空边界; $n$为边界外法线方向。 对于球谐函数方法有$\int_{n\cdot \Omega &lt;0}n\cdot \Omega\vec{Y}(Ω)\phi(r,Ω) dΩ = 0$ 反射边界条件$\phi(r,Ω) =\phi(r,\mathbf{H}Ω) \,\,\,\,\,\,\,\,\,\,\,\, r \in \Gamma_{r},n\cdot \Omega &lt;0$ 其中$\Gamma_{r}$为反射边界，$\mathbf{H}$为反射矩阵 $\mathbf{H}=\mathbf{I}-2nn^{T}$ 对于球谐函数方法，将其用球谐函数展开，得$[\vec{Y}(Ω)]^{T}\vec{\phi}_{r}(r)= [\vec{Y}(\mathbf{H}Ω)]^{T}\vec{\phi}(r)$所以$\vec{\phi}_{r}(r) = \mathbf{R}\vec{\phi}(r)$其中$\mathbf{R}=\int_{Ω}\vec{Y}(Ω)[\vec{Y}(\mathbf{H}Ω)]^{T}dΩ$ 黎曼分解边界上的角度雅克比矩阵为$\mathbf{A}_{n}=n_x\mathbf{A}_{x}+n_y\mathbf{A}_{y}+n_z\mathbf{A}_{z}$ 对其进行特征值分解，得$\mathbf{A}_{n}=\mathbf{V}Λ\mathbf{V}^{T}=\mathbf{V}(Λ^{+}+Λ^{-})\mathbf{V}^{T}=\mathbf{A}_{n}^{+}+\mathbf{A}_{n}^{-}$ 其中$Λ$特征值对角矩阵，$Λ^{+}$为该矩阵中特征值为正的分量，$Λ^{-}$为该矩阵中特征值为负的分量；$\mathbf{V}$为特征向量形成的矩阵。$\mathbf{A}_{n}^{+}=\mathbf{V}Λ^{+}\mathbf{V}^{T}$$\mathbf{A}_{n}^{-}=\mathbf{V}Λ^{-}\mathbf{V}^{T}$ 边界积分项通过特征值分解，边界积分项可以分解为入流部分与出流部分$\mathbf{B}_{Γ}\mathbf{X}\mathbf{A}_{n} = \mathbf{B}_{Γ}\mathbf{X}\mathbf{A}_{n}^{+} + \mathbf{B}_{Γ}\mathbf{X}\mathbf{A}_{n}^{-} $ 其中$\mathbf{B}_{Γ}$是空间边界上的积分， $\mathbf{B}_{Γ}\mathbf{X}\mathbf{A}_{n}^{-} $表示入流，$\mathbf{B}_{Γ}\mathbf{X}\mathbf{A}_{n}^{+} $ 表示出流，所以对于真空边界条件与反射边界条件可以表示为 真空边界$\mathbf{B}_{Γ}\mathbf{X}\mathbf{A}_{n}^{-} = 0$ 反射边界$\mathbf{B}_{Γ}\mathbf{X}\mathbf{A}_{n}^{-} = \mathbf{B}_{Γ}\mathbf{X}\mathbf{R}\mathbf{A}_{n}^{-}$]]></content>
      <categories>
        <category>中子输运方程</category>
      </categories>
      <tags>
        <tag>中子输运方程</tag>
        <tag>边界条件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[代数方程的物理含义]]></title>
    <url>%2F2017%2F10%2F20%2F%E4%BB%A3%E6%95%B0%E6%96%B9%E7%A8%8B%E7%9A%84%E7%89%A9%E7%90%86%E5%90%AB%E4%B9%89%2F</url>
    <content type="text"><![CDATA[通常情况下我们使用偏微分方程组来描述物理现象，然后将该方程通过数值离散为一个代数方程来进行求解。然而，在这里，我直接从守恒关系出发，直接研究代数方程的物理含义。 代数方程代数方程是一个矩阵乘以一个未知向量等于一个已知向量的方程，表示如下$\mathbf{A}\vec{x}=\vec{b}$ 第i行可以表示为$\sum_{j}a_{ij}x_{j}=b_{i}$ 另$a_{ij}x_{j}=f_{ij}$，所以$\sum_{j}f_{ij}=b_{i}$ 守恒关系该方程代表一种物理守恒关系，右端项$b_{i}$表示节点$i$产生的量，左端项$\sum_{j}f_{ij}$表示节点$i$消失的量。其中$f_{ij},i\ne j$表示从节点 $i$ 通过对流或扩散转移到节点 $j$ 的量，其中$f_{ii}$表示从节点 $i$ 处发生反应消失的量。 由于$f_{ij} = a_{ij}x_{j}$，所以系数$a_{ij}$可以看成一个权重系数，即从节点 $i$ 转移到节点 $j$ 的量可以用节点 $j$ 的量的一个权重表示。 由于$a_{ij}$的一些性质，实际上 $f_{ij}$ 并不一定定义为 $a_{ij}x_{j}$，但一定要保证守恒关系。 矩阵性质在物理上，通常右端项 $\vec{b}$ 为源项，是非负的，这种情况下要求未知量 $\vec{x}$ 也是非负的。此时矩阵 $\mathbf{A}$ 必须有一些特殊的性质。 M-Matrix代数方程的解为$\vec{x} = \mathbf{A}^{-1}\vec{b}$ 由于 $\vec{b}$ 取任意非负值时，解 $\vec{x}$ 都必须为非负值，所以$\mathbf{A}^{-1}$的所有元素都必须为非负值。此时矩阵 $\mathbf{A}$ 被称为 单调矩阵。 一个非对角元上只有非正值的单调矩阵被称为 M-Matrix 如果矩阵 $\mathbf{A}$ 有以下性质，则$\mathbf{A}$ 是M-Matrix $a_{ii}&gt;0,∀ i$ $a_{ij}\le0,∀ j\ne i$ $\sum{a_{ij}}\ge 0,∀ i$ 证明：$\mathbf{A}=\mathbf{D}-\mathbf{C}$其中$\mathbf{D}= diag(\mathbf{A})&gt;0$为$\mathbf{A}$的对角元素，$\mathbf{C} \ge 0$为$\mathbf{A}$的非对角元，所以$\mathbf{A}^{-1}=(\mathbf{D}-\mathbf{C})^{-1} = [\mathbf{D}(\mathbf{I}-\mathbf{D}^{-1}\mathbf{C})]^{-1} = (\mathbf{I}-\mathbf{D}^{-1}\mathbf{C})^{-1}\mathbf{D}^{-1}$另 $\mathbf{B}=\mathbf{D}^{-1}\mathbf{C} \ge 0$，由于是对角占优的，所以$\mathbf{B}$的谱半径$\rho(\mathbf{B})&lt;1$，所以以下级数是收敛的$(\mathbf{I}-\mathbf{B})^{-1}=\mathbf{I}+\mathbf{B}+\mathbf{B}^2+\mathbf{B}^3+ …$所以$\mathbf{A}^{-1}$的所有元素都为非负值]]></content>
      <categories>
        <category>数值计算</category>
      </categories>
      <tags>
        <tag>数值计算</tag>
        <tag>通量分解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网格与矩阵的对应关系]]></title>
    <url>%2F2017%2F10%2F20%2F%E7%BD%91%E6%A0%BC%E4%B8%8E%E7%9F%A9%E9%98%B5%E7%9A%84%E5%AF%B9%E5%BA%94%E5%85%B3%E7%B3%BB%2F</url>
    <content type="text"><![CDATA[在数值计算中，通常会将求解区域进行离散，离散之后的网格与最终形成的系数矩阵有着一一对应的关系，通常情况下离散网格某一点只会对其周围的点产生影响，对更远地方的点完全没有影响，所以与网格对应的矩阵是一个稀疏的，而且该矩阵与网格存在以下关系 网格中的一条边 ij 对应与矩阵中元素 aij。 一个点 i 对应与矩阵中的对角元素 aii。 网格中环绕某个点 i 的点数 psp 代表矩阵中 i 行的元素个数。 网格中环绕某个点 i 的单元数 esp 代表对矩阵中元素 aii 有贡献的单元数。 网格中环绕某条边 ij 的单元数 ese 代表对矩阵中元素 aij 有贡献的单元数。 示例以下为一个网格与矩阵对应关系的示例]]></content>
      <categories>
        <category>有限元</category>
      </categories>
      <tags>
        <tag>有限元</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[球谐函数方法]]></title>
    <url>%2F2017%2F10%2F20%2F%E7%90%83%E8%B0%90%E5%87%BD%E6%95%B0%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[中子输运方程的球谐函数方法是离散输运方程角度变量的一种方法，这种方法将输运方程中与角度相关的变量都用球谐函数展开，然后在方程两端同时乘以球谐函数并在整个角度上进行积分从而消去角度变量，此时方程变为一个只含有空间变量的偏微分方程组。 单能稳态中子输运方程$$Ω⋅∇ϕ(r,Ω)+σ_t(r)ϕ(r,Ω)=∫_ {\mathbb{S}} σ_s(r,Ω^{‘}⋅Ω)\phi(r,Ω^{‘})drdΩ^{‘} + s(r,Ω)$$ 球谐函数方法将中子角通量密度和散射截面和中子源用球谐函数展开，得 $$\phi(r,Ω) ≈ \sum_{n=0}^{N}\sum_{m=-n}^{n}\phi_{n,m}(r)Y_{n,m}(Ω)$$ $$σ_s(r,Ω^{‘}⋅Ω) ≈ \sum_{n=0}^{L}σ_{s,n}\sum_{m=-n}^{n}Y_{n,m}(Ω)Y_{n,m}(Ω^{‘})$$ $$s(r,Ω) ≈ \sum_{n=0}^{N}\sum_{m=-n}^{n}s_{n,m}(r)Y_{n,m}(Ω)$$ 将展开式带入中子输运方程，并将群内散射源移到方程左端，得 $$Ω⋅∇\sum_{n=0}^{N}\sum_{m=-n}^{n}\phi_{n,m}(r)Y_{n,m}(Ω)+\sum_{n=0}^{N}\sum_{m=-n}^{n}σ_n(r)\phi_{n,m}(r)Y_{n,m}(Ω)= \sum_{n=0}^{N}\sum_{m=-n}^{n}s_{n,m}(r)Y_{n,m}(Ω)$$ 其中 $$σ_n(r) = \left\{\begin{matrix}\sigma_t(r)-\sigma_{s,n}(r) \,\,\,\,\,\,\,\,\,\,\,\, 0 ≤n ≤ L\\\sigma_t(r) \,\,\,\,\,\,\,\,\,\,\,\, L ≤ n ≤ N&amp;\end{matrix}\right.$$ 向量形式将球谐函数的下标 $n,m$ 转化为一维下标 $j$，则输运方程可以表示为 $$Ω⋅∇[\vec{Y}(Ω)]^{T}\vec{\phi}(r)+[\vec{Y}(Ω)]^{T} \mathbf{Σ}(r)\vec{\phi}(r)= [\vec{Y}(Ω)]^{T}\vec{s}(r)$$ 其中$\mathbf{Σ}(r)$为对角矩阵，对角元素由 $\sigma_n$构成。 由球谐函数递推关系可知 $$Ω_x\vec{Y}(Ω) = \mathbf{A}_x\vec{Y}(Ω)$$ $$Ω_y\vec{Y}(Ω) = \mathbf{A}_y\vec{Y}(Ω)$$ $$Ω_z\vec{Y}(Ω) = \mathbf{A}_z\vec{Y}(Ω)$$ 其中 $ \mathbf{A}_x$, $ \mathbf{A}_y$, $ \mathbf{A}_z$为角度$x,y,z$方向上的雅可比矩阵，该矩阵是对称稀疏的。所以方程变为 $$[\vec{Y}]^{T}(Ω)[\mathbf{A}_x\frac{\partial \vec{\phi}(r)}{\partial x}+\mathbf{A}_y\frac{\partial \vec{\phi}(r)}{\partial y}+\mathbf{A}_z\frac{\partial \vec{\phi}(r)}{\partial z}+ \mathbf{Σ}\vec{\phi}(r)] = [\vec{Y}(Ω)]^{T}\vec{s}(r)$$ Galerkin投影利用Galerkin方法，在方程两端同时左乘球谐函数$\vec{Y}(Ω)$,然后对角度 $Ω$ 进行积分，由球谐函数正交关系 $$\int_\mathbb{S}\vec{Y}(Ω)[\vec{Y}]^{T}(Ω)dΩ = \mathbf{I}$$ 得经过球谐函数展开之后的偏微分方程组为 $$\mathbf{A}_x\frac{\partial \vec{\phi}(r)}{\partial x}+\mathbf{A}_y\frac{\partial \vec{\phi}(r)}{\partial y}+\mathbf{A}_z\frac{\partial \vec{\phi}(r)}{\partial z}+ \mathbf{Σ}\vec{\phi}(r) = \vec{s}(r)$$]]></content>
      <categories>
        <category>中子输运方程</category>
      </categories>
      <tags>
        <tag>中子输运方程</tag>
        <tag>pn方法</tag>
        <tag>球谐函数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[中子输运方程中常运符号的含义]]></title>
    <url>%2F2017%2F10%2F19%2F%E4%B8%AD%E5%AD%90%E8%BE%93%E8%BF%90%E6%96%B9%E7%A8%8B%E4%B8%AD%E5%B8%B8%E8%BF%90%E7%AC%A6%E5%8F%B7%E7%9A%84%E5%90%AB%E4%B9%89%2F</url>
    <content type="text"><![CDATA[$r$ : 空间坐标$\Omega$ : 角度坐标$\varphi$ : 幅角$\vartheta$ : 极角$\mathbb{S}$ : 单位球面$\nabla$ : 梯度算子$\phi$ : 角通量$\Phi$ : 标通量 ($n/(cm^2\cdot s)$)$\sigma$ : 微观截面 ( $b$,$1b=10^{-24}cm^2$ )$\Sigma$ : 宏观截面 ( $cm^{-1}$ )$\Sigma_t$ : 宏观总截面$\Sigma_s$ : 宏观散射截面$\Sigma_f$ : 宏观裂变截面$\nu$ : 每次裂变释放的中子数$\Sigma_{s,n}$ : n 阶散射截面$s_s$ : 散射源 ( $cm^{-3}\cdot s^{-1}$ )$s_f$ : 裂变源 ( $cm^{-3}\cdot s^{-1}$ )$s_e$ : 外源 ( $cm^{-3}\cdot s^{-1}$ )$n$ : 表面单位外法向量 $(\cdot,\cdot)$ : 求解域的内积，包含求解的空间和角度$(u,v)$ = $\int_{v}\int_{\mathbb{S}}uv d\Omega dr$ $&lt; \cdot,\cdot &gt;$ : 边界上的内积$&lt; u,v &gt; = \int_{\partial v}\int_{\mathbb{S}}uv \vec{n} \cdot\vec{\Omega}d\Omega dr$ $&lt; \cdot,\cdot &gt;^{+}$ : 边界上的内积，半角度$\vec{n}\cdot\vec{\Omega}&gt;0$ $&lt; u,v &gt;^{+} = \int_{\partial v}\int_{\vec{n} \cdot\vec{\Omega}&gt;0}uv \vec{n} \cdot\vec{\Omega}d\Omega dr$ $&lt; \cdot,\cdot &gt;^{-}$ : 边界上的内积，半角度 $\vec{n} \cdot \vec{\Omega}&lt;0$ $&lt; u,v &gt;^{-} = \int_{\partial v}\int_{\vec{n} \cdot \vec{\Omega}&lt;0} uv \vec{n}\cdot \vec{\Omega} d\Omega dr$]]></content>
      <categories>
        <category>中子输运方程</category>
      </categories>
      <tags>
        <tag>中子输运方程</tag>
        <tag>符号</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[通量分解]]></title>
    <url>%2F2017%2F10%2F19%2F%E9%80%9A%E9%87%8F%E5%88%86%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[通量在求解区域应该满足平衡方程，这种平衡关系反应了输运方程的物理本质，其中包含以下几点 相邻的两个节点通量会互相交换 一个节点上增加的量必须从另一个节点上减去 通量可以通过边界互相交换 通量能够通过反应减少 通量是由源产生的 前三点通过输运方程第一项（泄露项）反应，第四点通过第二项（移出项）反应，第五点由方程右端项反应。同时第三点也通过边界条件进行反应。 数值通量通过定义数值通量$\mathbf{\Phi}$来反应相邻节点间的通量交换关系。其中$\mathbf{\Phi}$是一个稀疏矩阵，其稀疏性与网格的稀疏模式一致。其元素$\Phi_{ij}$表示从节点$j$转移到节点$i$的通量，显然$\Phi_{ij}=-\Phi_{ji}$，即从节点$i$转移到节点$j$的等于负的节点$j$转移到节点$i$的量。即矩阵$\mathbf{\Phi}$是一个反对称矩阵。 通量在节点间的转移量通过输运方程第一项 (泄露项) 表示，有限元离散之后的半离散格式为 $\sum_{j}\mathbf{c}_{ij}\phi_{j}$， 由于$\sum_{j}\mathbf{c}_{ij} = 0$，所以转移到节点 $i$ 的量为$\sum_{j}\Phi_{ij} = \sum_{j}\mathbf{c}_{ij}\phi_{j} = \sum_{j}\mathbf{c}_{ij}\phi_{j} + \phi_{i}\sum_{j}\mathbf{c}_{ij} = \sum_{j}\mathbf{c}_{ij}(\phi_{i}+\phi_{j})$ 可以将系数$\mathbf{c}_{ij}$分解为反对称的$\mathbf{a}_{ij}$和对称的$\mathbf{b}_{ij}$，其中$\mathbf{c}_{ij} = (\mathbf{a}_{ij}+\mathbf{b}_{ij})/2$$\mathbf{a}_{ij} = \mathbf{c}_{ij}-\mathbf{c}_{ji}$$\mathbf{b}_{ij} = \mathbf{c}_{ij}+\mathbf{c}_{ji}$ 所以$\sum_{j}(\mathbf{a}_{ij}+\mathbf{b}_{ij})(\phi_{i}+\phi_{j})/2 = \sum_{j}\Phi_{ij} $ 通量分解为$\Phi_{ij} = \mathbf{a}_{ij}(\phi_{i}+\phi_{j})/2, \forall j \ne i$$\Phi_{ii} =\sum_{j} \mathbf{b}_{ij}(\phi_{i}+\phi_{j})/2$ ##]]></content>
      <categories>
        <category>有限元</category>
      </categories>
      <tags>
        <tag>中子输运方程</tag>
        <tag>通量分解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[有限元离散算子的性质]]></title>
    <url>%2F2017%2F10%2F19%2F%E6%9C%89%E9%99%90%E5%85%83%E7%A6%BB%E6%95%A3%E7%AE%97%E5%AD%90%E7%9A%84%E6%80%A7%E8%B4%A8%2F</url>
    <content type="text"><![CDATA[某些算子经过有限元离散之后会有一些很好的性质，其中包括拉普拉斯算子离散后的扩散矩阵，梯度或散度算子离散后产生的对流矩阵，未知量直接离散后产生的质量矩阵等。分析这些矩阵的性质这对理解有限元方法的本质以及对离散后方程的性质的理解都很有帮助。 基函数有限元方法在每一个离散点$j$上都定义了基函数$φ_{j}$，基函数之和在任何地方恒等于1，基函数梯度之和在任何地方恒等于0 $∑_{j}φ_{j} = 1$$∑_{j}∇φ_{j} = 0$ 质量矩阵M质量矩阵为未知量离散之后的系数矩阵$\mathbf{M} = \{m_{ij}\} = \{ \int_{V}φ_{i}φ_{j}dV \}$ 质量矩阵第i行之和为$∑_{j}m_{ij} = \int_{V}φ_{i}\sum_{j}φ_{j}dV = \int_{V}φ_{i}dV$ 质量矩阵所有元素之和等于积分区域的体积$∑_{i}∑_{j}m_{ij} = \int_{V}∑_{i}φ_{i}\sum_{j}φ_{j}dV = \int_{V}dV = V$ 质量矩阵实际上是将体积分配到节点对上作为权重系数 质量矩阵集中用一个对角矩阵$\mathbf{M}_{L}$来近似处理质量矩阵$\mathbf{M}$，其对角元素为质量矩阵每一行元素之和$\mathbf{M}_{L} = diag\{m_i\}$, $m_i=\sum_{j}m_{ij}$ 这样的对角矩阵$\mathbf{M}_{L}$是矩阵$\mathbf{M}$的保守近似$(\mathbf{M}_{L}\phi)_{i} = (\mathbf{M}\phi)_{i}$ 质量矩阵集中实际上是将有限元方法与节点为中心的有限体积法结合，在保证反应率守恒的情况下能够减少计算量。 扩散矩阵D扩散矩阵是拉普拉斯算子离散之后的系数矩阵$\mathbf{D} = \{d_{ij}\} = \{ \int_{V}∇φ_{i}∇φ_{j}dV \}$ 扩散矩阵是对称的，每一行，每一列之和都为0$∑_{j}d_{ij} = \int_{V}∇φ_{i}\sum_{j}∇φ_{j}dV = 0$$∑_{i}d_{ij} = \int_{V}\sum_{i}∇φ_{i}∇φ_{j}dV = 0$ 对流矩阵C对流矩阵是梯度或者散度离散之后的系数系数矩阵 $\vec{\mathbf{C}} = \{\vec{c}_{ij}\} = \{ \int_{V}φ_{i}∇φ_{j}dV \}$ 对流矩阵不对称，第i行之和为0$∑_{j}\vec{c}_{ij} = \int_{V}φ_{i}\sum_{j}∇φ_{j}dV = 0$ 第j列之和为$∑_{i}\vec{c}_{ij} = \int_{V}\sum_{i}φ_{i}∇φ_{j}dV = \int_{V}∇φ_{j}dV$ 对流矩阵的对称性对流矩阵与其转置之和 $\vec{b}_{ij} = \vec{c}_{ij}+\vec{c}_{ji}$ $\vec{b}_{ij}=\int_{V}φ_{i}∇φ_{j}dV + \int_{V}φ_{j}∇φ_{i}dV = \int_{V}∇(φ_{i}φ_{j})dV =\int_{Γ}φ_{i}φ_{j}\vec{n}dΓ$ 第j列之和为$∑_{i}\vec{b}_{ij} = \vec{b}_{j} = \int_{Γ}\varphi_{j}\vec{n}dΓ= \vec{n}_{j}Γ_{j}$$\vec{n}_{j}=\int_{Γ}\varphi_{j}\vec{n}dΓ/Γ_{j}$$Γ_{j}=\int_{Γ}\varphi_{j}dΓ$ 矩阵 $\mathbf{B}$ 是定义在边界上的对称矩阵 对流矩阵与其转置之差 $\vec{a}_{ij} = \vec{c}_{ij}-\vec{c}_{ji}$，矩阵$\mathbf{A}$ 是定义在区域内部的反对称矩阵。 $\mathbf{C} = [\mathbf{A}+\mathbf{B}]/2$ 表示对流矩阵是由边界上的对称矩阵和内部的反对称矩阵之和构成。]]></content>
      <categories>
        <category>有限元</category>
      </categories>
      <tags>
        <tag>有限元</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一阶中子输运方程galerkin离散]]></title>
    <url>%2F2017%2F10%2F19%2F%E4%B8%80%E9%98%B6%E4%B8%AD%E5%AD%90%E8%BE%93%E8%BF%90%E6%96%B9%E7%A8%8Bgalerkin%E7%A6%BB%E6%95%A3%2F</url>
    <content type="text"><![CDATA[对一阶中子输运方程直接进行Galerkin离散然后分部积分并将边界条件带入边界积分项与不进行分部积分而是方程直接减去galerkin离散后的边界条件是等价的。与将两个方程相加除二得到的方程也是等价的。 这与带约束的变分原理中拉格朗日乘子法很相似，其中拉格朗日乘子为 -1。 输运方程$$Ω⋅∇ϕ+σϕ = s$$ 弱形式$$(φ,Ω⋅∇ϕ)+(φ,σϕ) = (φ,s)$$ 分部积分$$&lt;φ,Ω⋅nϕ&gt; - (Ω⋅∇φ,ϕ)+(φ,σϕ) = (φ,s)$$ 边界条件$$&lt;φ,Ω⋅nϕ&gt;^{-} = G$$ 带边界条件的方程$$&lt;φ,Ω⋅nϕ&gt;^{+} - (Ω⋅∇φ,ϕ)+(φ,σϕ) = (φ,s) - G$$ 再分部积分$$&lt;φ,Ω⋅nϕ&gt;^{+} -&lt;φ,Ω⋅nϕ&gt; + (φ,Ω⋅∇ϕ)+(φ,σϕ) = (φ,s) - G$$ 带边界条件的原方程$$ -&lt;φ,Ω⋅nϕ&gt;^{-} + (φ,Ω⋅∇ϕ)+(φ,σϕ) = (φ,s)-G$$该方程实际上就是原方程减去边界上的方程。 相加除2$$ [&lt;φ,Ω⋅nϕ&gt;^{+}-&lt;φ,Ω⋅nϕ&gt;^{-}] /2 + [(φ,Ω⋅∇ϕ)- (Ω⋅∇φ,ϕ)]/2+(φ,σϕ) = (φ,s)-G$$ 矩阵形式定义$$C = (φ,Ω⋅∇φ)$$ $$R = (φ,σφ)$$ $$O = &lt;φ,Ω⋅nφ&gt;$$ $$O^{+} = &lt;φ,Ω⋅nφ&gt;^{+}$$ $$O^{-} = &lt;φ,Ω⋅nφ&gt;^{-}$$ $$b = (φ,s)-G$$所以$$C+C^{T} = O = O^{+} + O^{-}$$$$C - O^{-}= -C^{T}+ O^{+} = (C-C^{T})/2+(O^{+}-O^{-})/2$$ 所以以下三个方程是完全等价的$$[C - O^{-}+R]ϕ = b$$$$[ -C^{T}+ O^{+}+R]ϕ = b$$$$[ (C-C^{T})/2+(O^{+}-O^{-})/2+R]ϕ = b$$]]></content>
      <categories>
        <category>中子输运方程</category>
      </categories>
      <tags>
        <tag>中子输运方程</tag>
        <tag>Galerkin</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[三角形单元]]></title>
    <url>%2F2017%2F10%2F18%2F%E4%B8%89%E8%A7%92%E5%BD%A2%E5%8D%95%E5%85%83%2F</url>
    <content type="text"><![CDATA[本文解析的推导了线性三角形单元的基函数及其相关积分。将所有与基函数相关积分都用节点的实际坐标表示，并将其写成向量乘积的形式，这样在计算单元刚度矩阵时就不用使用数值积分而可以直接使用解析形式，而且如果采用无矩阵方法，单元矩阵与向量的乘积只需要很少的计算量。 形状函数$\vec{N}(r) = [λ_1,λ_2,λ_3]^{T}$$\frac{\partial \vec{N}(r)}{\partial x} = \frac{[b_1,b_2,b_3]^{T}}{2Δ}$$\frac{\partial \vec{N}(r)}{\partial y} = \frac{[c_1,c_2,c_3]^{T}}{2Δ}$ 其中 $b_1 = y_2-y_3$$b_2 = y_3-y_1$$b_3 = y_1-y_2$ $c_1 = x_3-x_2$$c_2 = x_1-x_3$$c_3 = x_2-x_1$ $2Δ=c_3b_2-b_3c_2$ 欧拉公式$\int_{s}λ_1^aλ_2^bλ_3^cdxdy=\frac{a!b!c!}{(a+b+c+2)!}2Δ$ 得 $\int_sdxdy = \frac{1}{2}2Δ$$\int_sλ_idxdy = \frac{1}{6}2Δ \,\,\,\,\, i=1,2,3$$\int_sλ_i^2dxdy = \frac{1}{12}2Δ \,\,\,\,\, i=1,2,3$$\int_sλ_iλ_jdxdy = \frac{1}{24}2Δ \,\,\,\,\, i=1,2,3;j=1,2,3,i≠j$ 单元矩阵$\mathbf{B}_{Γ}=\int_{Γ}\vec{N}(r)[\vec{N}]^{T}(r)dΓ=\frac{l}{6}(\vec{I}\vec{I}^T+\mathbf{I})$ $\mathbf{B}_{11}=\int_{e}\vec{N}(r)[\vec{N}]^{T}(r)dr=\frac{2Δ}{24}(\vec{I}\vec{I}^T+\mathbf{I})$ $\mathbf{B}_{x1}=\int_{e}\frac{\partial \vec{N}(r)}{\partial x}[\vec{N}]^{T}(r)dr=\frac{1}{6}\begin{bmatrix}b_1\\b_2\\b_3\end{bmatrix}\vec{I}^T$ $\mathbf{B}_{y1}=\int_{e}\frac{\partial \vec{N}(r)}{\partial x}[\vec{N}]^{T}(r)dr=\frac{1}{6}\begin{bmatrix}c_1\\c_2\\c_3\end{bmatrix}\vec{I}^T$ $\vec{b}=\int_{e}\vec{N}(r)dr=\frac{2Δ}{6}\vec{I}$ 与向量乘积移出项$[\mathbf{B}_{11}\mathbf{X}\mathbf{Σ}]_{\vec{e},j}= \int_{e}\vec{N}(r)[\vec{N}]^{T}(r)dr = \frac{2Δ}{24}(\vec{I}\vec{I}^T+\mathbf{I})\begin{bmatrix}\phi_{e(1),j}\\\phi_{e(2),j}\\\phi_{e(3),j}\end{bmatrix}Σ_{j}$ $= \frac{2ΔΣ_{j}}{24}(sum(\phi_{\vec{e},j})+\begin{bmatrix}\phi_{e(1),j}\\\phi_{e(2),j}\\\phi_{e(3),j}\end{bmatrix})$ 对流项 X方向 $-[\mathbf{B}_{x1}\mathbf{X}\mathbf{A}_x]_{\vec{e},j} = -\frac{1}{6}\begin{bmatrix}y_2-y_3\\y_3-y_1\\y_1-y_2\end{bmatrix}sum(\phi^{x}_{\vec{e},j})$ 其中 $\phi^{x}=\mathbf{X}\mathbf{A}_x$ Y方向 $-[\mathbf{B}_{y1}\mathbf{X}\mathbf{A}_y]_{\vec{e},j} = -\frac{1}{6}\begin{bmatrix}x_3-x_2\\x_1-x_3\\x_2-x_1\end{bmatrix}sum(\phi^{y}_{\vec{e},j})$ 其中 $\phi^{y}=\mathbf{X}\mathbf{A}_y$ 边界项$[\mathbf{B}_{Γ}\mathbf{X}\mathbf{A}_{n}]_{\vec{e},j}=\frac{l}{6}(\vec{I}\vec{I}^T+\mathbf{I})\begin{bmatrix}\phi^{n}_{e(1),j}\\\phi^{n}_{e(2),j}\end{bmatrix} = \frac{l}{6}(sum(\phi^{n}_{\vec{e},j})+\begin{bmatrix}\phi^{n}_{e(1),j}\\\phi^{n}_{e(2),j}\end{bmatrix})$ 右端项$[\vec{b}[\vec{s}]^{T}]_{\vec{e},j} = \frac{2Δ}{6}\vec{I}s_{j}$]]></content>
      <categories>
        <category>有限元</category>
      </categories>
      <tags>
        <tag>有限元</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用hexo和github搭建个人blog]]></title>
    <url>%2F2017%2F10%2F18%2F%E5%88%A9%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BAblog%2F</url>
    <content type="text"><![CDATA[最开始时使用emacs的org-mod写博客，但使用atom之后就很少使用emacs，blog也没有坚持写下去。现在想用markdown代替org-mod重新开始写blog，所以又开始了折腾。现在的主要流程是使用atom编辑markdown文档，然后使用hexo生成和发布blog，发布平台使用 github-page，下面对整个流程进行简单说明。 hexo是一款基于node 的静态博客网站生成器，官网hexo，按照官网说明一步步完成 hexo 安装。 常用命令12345678# 新建posthexo n post# 生成静态页面hexo g# 开启服务hexo s# 发布hexo d 配置站点配置文件_config.yml在项目根目录下, 主要包含站点的一些配置，例如1234567# Sitetitle:subtitle:description:author:language:timezone: 主题hexo 包含很多 主题 可以下载，直接clone到themes文件夹中，并在站点配置文件_config.yml中作简单配置就可以使用，next 主题是一款很干净简介的主题，以下主要对next主题进行配置。 next主题安装下载主题1git clone https://github.com/iissnan/hexo-theme-next themes/next 下载之后在 /themes/next/README.md中有next的使用说明和在线文档，仔细阅读后进行相关配置。 启用主题在站点配置文件_config.yml中找到 theme 字段，并将其值更改为 next12## Themes: https://hexo.io/themes/theme: next next主题配置主题配置文件为 /themes/next/_config.yml. 设置 scheme12345## Schemes#scheme: Musescheme: Mist#scheme: Pisces#scheme: Gemini 设置菜单123456789# When running the site in a subdirectory (e.g. domain.tld/blog), remove the leading slash (/archives -&gt; archives)menu: home: / categories: /categories/ #about: /about/ archives: /archives/ tags: /tags/ #sitemap: /sitemap.xml #commonweal: /404/ 某些页面默认没有，需要新建1hexo new page categories 并在新建页面中添加1type: "categories" 设置头像1avatar: /images/bio.png 修改themes\next\source\css_common\components\sidebar\sidebar-author.styl，设置头像为圆形 1234567891011121314151617181920212223242526272829.site-author-image &#123; display: block; margin: 0 auto; padding: $site-author-image-padding; max-width: $site-author-image-width; height: $site-author-image-height; border: site-author-image-border-color; /* start*/ border-radius: 50% webkit-transition: 1.4s all; moz-transition: 1.4s all; ms-transition: 1.4s all; transition: 1.4s all; /* end */&#125;/* start */.site-author-image:hover &#123; background-color: #55DAE1; webkit-transform: rotate(360deg) scale(1.1); moz-transform: rotate(360deg) scale(1.1); ms-transform: rotate(360deg) scale(1.1); transform: rotate(360deg) scale(1.1);&#125;/* end */ 设置分享12# Sharejiathis: true 设置评论使用第三方社交评论系统友言，注册友言之后得到一个用户id，填入配置文件中就行。123# Support for youyan comments system.# You can get your uid from http://www.uyan.ccyouyan_uid: xxxx 设置站内搜索使用local search, 安装 hexo-generator-searchdb，在站点的根目录下执行以下命令1npm install hexo-generator-searchdb --save 编辑站点配置文件，新增12345search: path: search.xml field: post format: html limit: 10000 编辑主题配置文件，启用local search123# Local searchlocal_search: enable: true 设置社交123social: #LinkLabel: Link GitHub: https://github.com/fccf 设置链接1234567# Blog rollslinks_title: Links#links_layout: blocklinks_layout: inlinelinks: #Title: http://example.com/ ITER: http://www.iter.org/ 文章加密打开themes/next/layout/_partials/head/custom-head.swig文件,插入以下代码： 12345678910&lt;script&gt; (function()&#123; if('&#123;&#123; page.password &#125;&#125;')&#123; if (prompt('请输入文章密码') !== '&#123;&#123; page.password &#125;&#125;')&#123; alert('密码错误！'); history.back(); &#125; &#125; &#125;)();&lt;/script&gt; 然后在文章开头添加 password 1234title:date:tags:password: xxxx 写作使用atom编辑器编辑markdown文件，因为atom编辑器有些markdown插件很好用，比如 markdown-preview-enhanced 可以在线预览，可以直接编辑图片和公式等，用起来比emacs的org-mod爽，所以彻底抛弃了emacs。 markdown 语法markdown语法很简单，上手很快，但功能很强大。markdown可以使用很多编辑器进行编辑，还可以在线编辑以及预览 stackedit. readmore1&lt;!-- more --&gt; 设置MathJax公式显示需要设置 MathJax12345# MathJax Supportmathjax: enable: true per_page: false cdn: //cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML MathJax与Markdown兼容问题Hexo默认使用”hexo-renderer-marked”引擎渲染网页，该引擎会把一些特殊的markdown符号转换为相应的html标签，比如在markdown语法中，下划线’_‘代表斜体，会被渲染引擎处理为标签。修改代码解决该问题 参考 去掉\的额外转义 将em标签对应的符号中，去掉_,因为markdown中有*可以表示斜体 打开marked.js（在./node_modules/marked/lib/中）取消对\\,\{,\}的转义(escape),作以下替换12// escape: /^\\([\\`*&#123;&#125;\[\]()#+\-.!_&gt;])/, escape: /^\\([`*\[\]()# +\-.!_&gt;])/, 取消对_的转义(escape),作以下替换12//em: /^\b_((?:[^_]|__)+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/, em:/^\*((?:\*\*|[\s\S])+?)\*(?!\*)/, 图片使用七牛云作为图床，将所有图片都上传到七牛云上。 配置七牛云七牛云配置文件conf_qiniu.json可以直接放在blog目录下1234567891011121314&#123; "src_dir" : "xxx", "access_key" : "xxx", "secret_key" : "xxx", "up_host" : "xxx", "zone" : "hn", "bucket" : "images", "ignore_dir" : false, "overwrite" : false, "check_exists" : false, "check_hash" : false, "check_size" : false, "rescan_local" : true&#125; 上传图片1qshell qupload conf_qiniu.json 发布github在github上新建项目： fccf.github.io 配置1234deploy: type: git repo: git@github.com:fccf/fccf.github.io.git branch: master 发布发布前先生成1hexo d -g 如果出现错误：ERROR Deployer not found: git，执行命令 npm install hexo-deployer-git –save 绑定域名 在阿里云上申请一个域名 在根目录下新建文件CNAME,文件内容为域名，不含https和www 在阿里云控制台中添加域名解析 12@ A 151.101.77.147www CNAME username.github.io. [1] http://ookamiantd.top/2017/build-blog-hexo-advanced/]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F10%2F17%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
